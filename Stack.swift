//
//  Stack.swift
//  pep9pad
//
//  Created by James Maynard on 6/14/18.
//  Copyright Â© 2018 Pepperdine University. All rights reserved.
//
//  Generated by PaintCode
//  http://www.paintcodeapp.com
//



import UIKit

public class Stack : NSObject {

    //// Drawing Methods

    @objc dynamic public class func drawCanvas2(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 768, height: 1024), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 768, height: 1024), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 768, y: resizedFrame.height / 1024)
        
        let screenWidth = SplitTraceViewController().windowWidth()
        let screenHeight = SplitTraceViewController().windowHeight()

        print(screenWidth)
        print(screenHeight)
        
//        //// localRect Drawing
//        let localRectPath = UIBezierPath(rect: CGRect(x: 344, y: 459, width: 74, height: 23))
//        UIColor.black.setStroke()
//        localRectPath.lineWidth = 2
//        //localRectPath.stroke()

        
        //// stage Drawing
        let stagePath = UIBezierPath()
        stagePath.move(to: CGPoint(x: 320.02, y: 482.5))
        stagePath.addLine(to: CGPoint(x: 442, y: 482.5))
        stagePath.move(to: CGPoint(x: 335.58, y: 482.5))
        stagePath.addLine(to: CGPoint(x: 315.5, y: 497.5))
        stagePath.move(to: CGPoint(x: 350.64, y: 482.5))
        stagePath.addLine(to: CGPoint(x: 330.56, y: 497.5))
        stagePath.move(to: CGPoint(x: 365.7, y: 482.5))
        stagePath.addLine(to: CGPoint(x: 345.62, y: 497.5))
        stagePath.move(to: CGPoint(x: 395.82, y: 482.5))
        stagePath.addLine(to: CGPoint(x: 375.74, y: 497.5))
        stagePath.move(to: CGPoint(x: 380.76, y: 482.5))
        stagePath.addLine(to: CGPoint(x: 360.68, y: 497.5))
        stagePath.move(to: CGPoint(x: 410.88, y: 482.5))
        stagePath.addLine(to: CGPoint(x: 390.8, y: 497.5))
        stagePath.move(to: CGPoint(x: 425.94, y: 482.5))
        stagePath.addLine(to: CGPoint(x: 405.86, y: 497.5))
        stagePath.move(to: CGPoint(x: 441, y: 482.5))
        stagePath.addLine(to: CGPoint(x: 420.92, y: 497.5))
        UIColor.black.setStroke()
        stagePath.lineWidth = 2
        stagePath.stroke()
    }


    @objc(StackResizingBehavior)
    public enum ResizingBehavior: Int {
        case aspectFit /// The content is proportionally resized to fit into the target rectangle.
        case aspectFill /// The content is proportionally resized to completely fill the target rectangle.
        case stretch /// The content is stretched to match the entire target rectangle.
        case center /// The content is centered in the target rectangle, but it is NOT resized.

        public func apply(rect: CGRect, target: CGRect) -> CGRect {
            if rect == target || target == CGRect.zero {
                return rect
            }

            var scales = CGSize.zero
            scales.width = abs(target.width / rect.width)
            scales.height = abs(target.height / rect.height)

            switch self {
                case .aspectFit:
                    scales.width = min(scales.width, scales.height)
                    scales.height = scales.width
                case .aspectFill:
                    scales.width = max(scales.width, scales.height)
                    scales.height = scales.width
                case .stretch:
                    break
                case .center:
                    scales.width = 1
                    scales.height = 1
            }

            var result = rect.standardized
            result.size.width *= scales.width
            result.size.height *= scales.height
            result.origin.x = target.minX + (target.width - result.width) / 2
            result.origin.y = target.minY + (target.height - result.height) / 2
            return result
        }
    }
}
