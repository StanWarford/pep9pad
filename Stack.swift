//
//  Stack.swift
//  pep9pad
//
//  Created by James Maynard on 6/14/18.
//  Copyright Â© 2018 Pepperdine University. All rights reserved.
//
//  Generated by PaintCode
//  http://www.paintcodeapp.com
//



import UIKit

public class Stack : NSObject {

    //// Drawing Methods

    @objc dynamic public class func drawCanvas2(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 768, height: 1024), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        print("CONTEXT")
        print(context)
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 768, height: 1024), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 768, y: resizedFrame.height / 1024)
        
        print("SCALED CONTEXT")
        print(context)
        
        let screenWidth = resizedFrame.width
        let screenHeight = resizedFrame.height
        
        print("DIMENSIONS")
        print(screenWidth)
        print(screenHeight)
        
        let x0 = 0.41669271*Double(screenWidth)
        let y0 = 0.47119141*Double(screenHeight)
        
        print("VARS")
        print(x0)
        print(y0)

//        //// localRect Drawing
//        let localRectPath = UIBezierPath(rect: CGRect(x: 344, y: 459, width: 74, height: 23))
//        UIColor.black.setStroke()
//        localRectPath.lineWidth = 2
//        //localRectPath.stroke()

        
        //// stage Drawing
        let stagePath = UIBezierPath()
        stagePath.move(to: CGPoint(x: x0, y: y0))
        stagePath.addLine(to: CGPoint(x: x0 + 121.98,y: y0))
        stagePath.move(to: CGPoint(x: x0 + 15.56, y: y0))
        stagePath.addLine(to: CGPoint(x: x0 - 4.52, y: y0 + 15.0))
        stagePath.move(to: CGPoint(x: x0 + 30.62, y: y0))
        stagePath.addLine(to: CGPoint(x: x0 + 10.54, y: y0 + 15.0))
        stagePath.move(to: CGPoint(x: x0 + 45.68, y: y0))
        stagePath.addLine(to: CGPoint(x: x0 + 25.6, y: y0 + 15.0))
        stagePath.move(to: CGPoint(x: x0 + 60.74, y: y0))
        stagePath.addLine(to: CGPoint(x: x0 + 40.66, y: y0 + 15.0))
        stagePath.move(to: CGPoint(x: x0 + 75.8, y: y0))
        stagePath.addLine(to: CGPoint(x: x0 + 55.72, y: y0 + 15.0))
        stagePath.move(to: CGPoint(x: x0 + 90.86, y: y0))
        stagePath.addLine(to: CGPoint(x: x0 + 70.78, y: y0 + 15.0))
        stagePath.move(to: CGPoint(x: x0 + 105.92, y: y0))
        stagePath.addLine(to: CGPoint(x: x0 + 85.84, y: y0 + 15.0))
        stagePath.move(to: CGPoint(x: x0 + 120.98, y: y0))
        stagePath.addLine(to: CGPoint(x: x0 + 100.9, y: y0 + 15.0))
        UIColor.black.setStroke()
        stagePath.lineWidth = 2
        stagePath.stroke()
    }


    @objc(StackResizingBehavior)
    public enum ResizingBehavior: Int {
        case aspectFit /// The content is proportionally resized to fit into the target rectangle.
        case aspectFill /// The content is proportionally resized to completely fill the target rectangle.
        case stretch /// The content is stretched to match the entire target rectangle.
        case center /// The content is centered in the target rectangle, but it is NOT resized.

        public func apply(rect: CGRect, target: CGRect) -> CGRect {
            if rect == target || target == CGRect.zero {
                return rect
            }

            var scales = CGSize.zero
            scales.width = abs(target.width / rect.width)
            scales.height = abs(target.height / rect.height)

            switch self {
                case .aspectFit:
                    scales.width = min(scales.width, scales.height)
                    scales.height = scales.width
                case .aspectFill:
                    scales.width = max(scales.width, scales.height)
                    scales.height = scales.width
                case .stretch:
                    break
                case .center:
                    scales.width = 1
                    scales.height = 1
            }

            var result = rect.standardized
            result.size.width *= scales.width
            result.size.height *= scales.height
            result.origin.x = target.minX + (target.width - result.width) / 2
            result.origin.y = target.minY + (target.height - result.height) / 2
            return result
        }
    }
}
