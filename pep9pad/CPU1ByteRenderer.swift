//
//  CPU1ByteRenderer.swift
//  ProjectName
//
//  Created by AuthorName on 3/6/17.
//  Copyright Â© 2017 CompanyName. All rights reserved.
//
//  Generated by PaintCode
//  http://www.paintcodeapp.com
//



import UIKit

public class CPU1ByteRenderer : NSObject {
    
    
    static var registerBankColor = UIColor(red: 0.764, green: 0.706, blue: 0.762, alpha: 1.000)
    static var bitsBoxColor = UIColor(red: 0.851, green: 0.802, blue: 0.759, alpha: 1.000)
    static var aLUColor = UIColor(red: 0.615, green: 0.975, blue: 1.000, alpha: 1.000)
    static var arrowBlack = UIColor(red: 0.000, green: 0.000, blue: 0.000, alpha: 1.000)
    static var aLUstrokeblack = UIColor(red: 0.000, green: 0.000, blue: 0.000, alpha: 1.000)
    static var labelBlack = UIColor(red: 0.000, green: 0.000, blue: 0.000, alpha: 1.000)
    static var aLUvalgrey = UIColor(red: 0.855, green: 0.855, blue: 0.855, alpha: 1.000)
    static var mWhite = UIColor(red: 1.000, green: 1.000, blue: 1.000, alpha: 1.000)
    static var loadCkArrowColor = UIColor(red: 0.000, green: 0.000, blue: 0.000, alpha: 1.000)
    static var cArrowColor = UIColor(red: 1.000, green: 0.000, blue: 0.000, alpha: 1.000)
    static var bArrowColor = UIColor(red: 0.000, green: 0.003, blue: 1.000, alpha: 1.000)
    static var aArrowColor = UIColor(red: 0.303, green: 0.430, blue: 0.273, alpha: 1.000)
    static var bBusPipeColor = UIColor(red: 1.000, green: 0.000, blue: 0.000, alpha: 1.000)
    static var aBusPipeColor = UIColor(red: 1.000, green: 0.000, blue: 0.000, alpha: 1.000)
    static var cBusPipeColor = UIColor(red: 1.000, green: 0.963, blue: 0.585, alpha: 1.000)
    static var mARCkArrowColor = UIColor(red: 0.709, green: 0.709, blue: 0.709, alpha: 1.000)
    static var mDRCkArrowColor = UIColor(red: 0.482, green: 0.268, blue: 0.268, alpha: 1.000)
    static var aMUXArrowColor = UIColor(red: 0.000, green: 0.000, blue: 0.000, alpha: 1.000)
    static var mDRMuxArrowColor = UIColor(red: 0.000, green: 0.000, blue: 0.000, alpha: 1.000)
    static var cMuxArrowColor = UIColor(red: 0.565, green: 0.905, blue: 0.741, alpha: 1.000)
    static var aMuxComboColor = UIColor(red: 1.000, green: 0.000, blue: 0.000, alpha: 1.000)
    static var aLULArrowsColor = UIColor(red: 0.000, green: 0.000, blue: 0.000, alpha: 1.000)
    static var cBitArrowColor = UIColor(red: 0.000, green: 0.000, blue: 0.000, alpha: 1.000)
    static var vBitArrowColor = UIColor(red: 0.493, green: 0.493, blue: 0.493, alpha: 1.000)
    static var zBitArrowColor = UIColor(red: 1.000, green: 0.000, blue: 0.000, alpha: 1.000)
    static var nBitArrowColor = UIColor(red: 0.104, green: 0.282, blue: 0.601, alpha: 1.000)
    static var memWriteArrowColor = UIColor(red: 0.050, green: 0.405, blue: 0.483, alpha: 1.000)
    static var memReadArrowColor = UIColor(red: 0.454, green: 0.114, blue: 0.114, alpha: 1.000)
    static var cSMuxInArrowColor = UIColor(red: 1.000, green: 0.000, blue: 0.000, alpha: 1.000)
    static var sCkArrowColor = UIColor(red: 1.000, green: 0.000, blue: 0.000, alpha: 1.000)
    static var cCkArrowInColor = UIColor(red: 0.096, green: 0.193, blue: 0.564, alpha: 1.000)
    static var vCkArrowColor = UIColor(red: 1.000, green: 0.000, blue: 0.000, alpha: 1.000)
    static var andZArrowInColor = UIColor(red: 0.639, green: 0.230, blue: 0.724, alpha: 1.000)
    static var nCkArrowColor = UIColor(red: 1.000, green: 0.000, blue: 0.000, alpha: 1.000)
    static var andZArrowOutColor = UIColor(red: 0.000, green: 0.000, blue: 0.000, alpha: 1.000)
    static var mARBColor = UIColor(red: 0.000, green: 0.287, blue: 1.000, alpha: 1.000)
    static var mARAColor = UIColor(red: 0.037, green: 1.000, blue: 0.000, alpha: 1.000)
    static var mARArrowColor = UIColor(red: 0.345, green: 0.596, blue: 0.849, alpha: 1.000)
    static var systemBusColor = UIColor(red: 0.413, green: 0.722, blue: 0.296, alpha: 1.000)
    static var memWriteColor = UIColor(red: 0.889, green: 0.373, blue: 0.373, alpha: 1.000)
    static var mDRCktoAMuxColor = UIColor(red: 0.583, green: 0.644, blue: 0.361, alpha: 1.000)
    static var mDRMuxColor = UIColor(red: 0.758, green: 0.564, blue: 0.789, alpha: 1.000)
    static var bustoMDRMuxColor = UIColor(red: 0.000, green: 0.840, blue: 1.000, alpha: 1.000)
    static var aLUtoCMuxColor = UIColor(red: 0.528, green: 0.350, blue: 0.913, alpha: 1.000)
    static var cSMuxColor = UIColor(red: 0.672, green: 0.599, blue: 0.599, alpha: 1.000)
    static var bitstoCMuxColor = UIColor(red: 0.048, green: 1.000, blue: 0.000, alpha: 1.000)
    static var checkBoxFill = UIColor(red: 0.920, green: 0.920, blue: 0.920, alpha: 1.000)
    
    // Text
    

    //// Drawing Methods

    @objc public dynamic class func drawIpad(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 840, height: 1024), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 840, height: 1024), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 840, y: resizedFrame.height / 1024)

        //// Lines
        //// LoadCKArrow
        context.saveGState()
        context.translateBy(x: 618, y: 60)
        context.scaleBy(x: 1.01, y: 1)

        //// Bezier 89 Drawing
        let bezier89Path = UIBezierPath()
        bezier89Path.move(to: CGPoint(x: -0, y: 4.5))
        bezier89Path.addLine(to: CGPoint(x: 16.45, y: 0.5))
        bezier89Path.addLine(to: CGPoint(x: 16.45, y: 3.5))
        bezier89Path.addLine(to: CGPoint(x: 16.45, y: 5.5))
        bezier89Path.addLine(to: CGPoint(x: 16.45, y: 8.5))
        bezier89Path.addLine(to: CGPoint(x: -0, y: 4.5))
        bezier89Path.close()
        loadCkArrowColor.setFill()
        bezier89Path.fill()


        //// Bezier 91 Drawing
        let bezier91Path = UIBezierPath()
        bezier91Path.move(to: CGPoint(x: 13.93, y: 4.5))
        bezier91Path.addLine(to: CGPoint(x: 101, y: 4.5))
        loadCkArrowColor.setStroke()
        bezier91Path.lineWidth = 1
        bezier91Path.stroke()



        context.restoreGState()


        //// CArrow
        context.saveGState()
        context.translateBy(x: 618, y: 92)



        //// Bezier 92 Drawing
        let bezier92Path = UIBezierPath()
        bezier92Path.move(to: CGPoint(x: 0, y: 23.5))
        bezier92Path.addLine(to: CGPoint(x: 9.44, y: 19.5))
        bezier92Path.addLine(to: CGPoint(x: 9.44, y: 22.5))
        bezier92Path.addLine(to: CGPoint(x: 9.44, y: 24.5))
        bezier92Path.addLine(to: CGPoint(x: 9.44, y: 27.5))
        bezier92Path.addLine(to: CGPoint(x: 0, y: 23.5))
        bezier92Path.close()
        cArrowColor.setFill()
        bezier92Path.fill()


        //// Bezier 93 Drawing
        let bezier93Path = UIBezierPath()
        bezier93Path.move(to: CGPoint(x: 8, y: 23.43))
        bezier93Path.addLine(to: CGPoint(x: 102, y: 23.43))
        cArrowColor.setStroke()
        bezier93Path.lineWidth = 1
        bezier93Path.stroke()


        //// Bezier 94 Drawing
        let bezier94Path = UIBezierPath()
        bezier94Path.move(to: CGPoint(x: 22.14, y: 15.5))
        bezier94Path.addLine(to: CGPoint(x: 36.79, y: 31.36))
        cArrowColor.setStroke()
        bezier94Path.lineWidth = 1
        bezier94Path.stroke()


        //// Text 57 Drawing
        let text57Rect = CGRect(x: 30, y: 8.43, width: 14, height: 15)
        let text57TextContent = "5"
        let text57Style = NSMutableParagraphStyle()
        text57Style.alignment = .left
        let text57FontAttributes = [NSAttributedStringKey.font: UIFont.systemFont(ofSize: UIFont.systemFontSize), NSAttributedStringKey.foregroundColor: cArrowColor, NSAttributedStringKey.paragraphStyle: text57Style] as [NSAttributedStringKey : Any]

        let text57TextHeight: CGFloat = text57TextContent.boundingRect(with: CGSize(width: text57Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: text57FontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: text57Rect)
        text57TextContent.draw(in: CGRect(x: text57Rect.minX, y: text57Rect.minY + (text57Rect.height - text57TextHeight) / 2, width: text57Rect.width, height: text57TextHeight), withAttributes: text57FontAttributes)
        context.restoreGState()



        context.restoreGState()


        //// BArrow
        context.saveGState()
        context.translateBy(x: 618, y: 122)



        //// Bezier 95 Drawing
        let bezier95Path = UIBezierPath()
        bezier95Path.move(to: CGPoint(x: 0, y: 23.5))
        bezier95Path.addLine(to: CGPoint(x: 9.44, y: 19.5))
        bezier95Path.addLine(to: CGPoint(x: 9.44, y: 22.5))
        bezier95Path.addLine(to: CGPoint(x: 9.44, y: 24.5))
        bezier95Path.addLine(to: CGPoint(x: 9.44, y: 27.5))
        bezier95Path.addLine(to: CGPoint(x: 0, y: 23.5))
        bezier95Path.close()
        bArrowColor.setFill()
        bezier95Path.fill()


        //// Bezier 96 Drawing
        let bezier96Path = UIBezierPath()
        bezier96Path.move(to: CGPoint(x: 8, y: 23.43))
        bezier96Path.addLine(to: CGPoint(x: 102, y: 23.43))
        bArrowColor.setStroke()
        bezier96Path.lineWidth = 1
        bezier96Path.stroke()


        //// Bezier 97 Drawing
        let bezier97Path = UIBezierPath()
        bezier97Path.move(to: CGPoint(x: 22.14, y: 15.5))
        bezier97Path.addLine(to: CGPoint(x: 36.79, y: 31.36))
        bArrowColor.setStroke()
        bezier97Path.lineWidth = 1
        bezier97Path.stroke()


        //// Text 58 Drawing
        let text58Rect = CGRect(x: 30, y: 8.43, width: 14, height: 15)
        let text58TextContent = "5"
        let text58Style = NSMutableParagraphStyle()
        text58Style.alignment = .left
        let text58FontAttributes = [NSAttributedStringKey.font: UIFont.systemFont(ofSize: UIFont.systemFontSize), NSAttributedStringKey.foregroundColor: bArrowColor, NSAttributedStringKey.paragraphStyle: text58Style] as [NSAttributedStringKey : Any]

        let text58TextHeight: CGFloat = text58TextContent.boundingRect(with: CGSize(width: text58Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: text58FontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: text58Rect)
        text58TextContent.draw(in: CGRect(x: text58Rect.minX, y: text58Rect.minY + (text58Rect.height - text58TextHeight) / 2, width: text58Rect.width, height: text58TextHeight), withAttributes: text58FontAttributes)
        context.restoreGState()



        context.restoreGState()


        //// AArrow
        context.saveGState()
        context.translateBy(x: 618, y: 152)



        //// Bezier 98 Drawing
        let bezier98Path = UIBezierPath()
        bezier98Path.move(to: CGPoint(x: 0, y: 23.5))
        bezier98Path.addLine(to: CGPoint(x: 9.44, y: 19.5))
        bezier98Path.addLine(to: CGPoint(x: 9.44, y: 22.5))
        bezier98Path.addLine(to: CGPoint(x: 9.44, y: 24.5))
        bezier98Path.addLine(to: CGPoint(x: 9.44, y: 27.5))
        bezier98Path.addLine(to: CGPoint(x: 0, y: 23.5))
        bezier98Path.close()
        aArrowColor.setFill()
        bezier98Path.fill()


        //// Bezier 99 Drawing
        let bezier99Path = UIBezierPath()
        bezier99Path.move(to: CGPoint(x: 8, y: 23.43))
        bezier99Path.addLine(to: CGPoint(x: 102, y: 23.43))
        aArrowColor.setStroke()
        bezier99Path.lineWidth = 1
        bezier99Path.stroke()


        //// Bezier 100 Drawing
        let bezier100Path = UIBezierPath()
        bezier100Path.move(to: CGPoint(x: 22.14, y: 15.5))
        bezier100Path.addLine(to: CGPoint(x: 36.79, y: 31.36))
        aArrowColor.setStroke()
        bezier100Path.lineWidth = 1
        bezier100Path.stroke()


        //// Text 59 Drawing
        let text59Rect = CGRect(x: 30, y: 8.43, width: 14, height: 15)
        let text59TextContent = "5"
        let text59Style = NSMutableParagraphStyle()
        text59Style.alignment = .left
        let text59FontAttributes = [NSAttributedStringKey.font: UIFont.systemFont(ofSize: UIFont.systemFontSize), NSAttributedStringKey.foregroundColor: aArrowColor, NSAttributedStringKey.paragraphStyle: text59Style] as [NSAttributedStringKey : Any]

        let text59TextHeight: CGFloat = text59TextContent.boundingRect(with: CGSize(width: text59Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: text59FontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: text59Rect)
        text59TextContent.draw(in: CGRect(x: text59Rect.minX, y: text59Rect.minY + (text59Rect.height - text59TextHeight) / 2, width: text59Rect.width, height: text59TextHeight), withAttributes: text59FontAttributes)
        context.restoreGState()



        context.restoreGState()


        //// AMUXArrow
        context.saveGState()
        context.translateBy(x: 492, y: 456)



        //// Bezier 2 Drawing
        let bezier2Path = UIBezierPath()
        bezier2Path.move(to: CGPoint(x: 0, y: 4.5))
        bezier2Path.addLine(to: CGPoint(x: 10.11, y: 0.5))
        bezier2Path.addLine(to: CGPoint(x: 10.11, y: 3.5))
        bezier2Path.addLine(to: CGPoint(x: 10.11, y: 5.5))
        bezier2Path.addLine(to: CGPoint(x: 10.11, y: 8.5))
        bezier2Path.addLine(to: CGPoint(x: 0, y: 4.5))
        bezier2Path.close()
        aMUXArrowColor.setFill()
        bezier2Path.fill()


        //// Bezier 3 Drawing
        let bezier3Path = UIBezierPath()
        bezier3Path.move(to: CGPoint(x: 8.56, y: 4.5))
        bezier3Path.addLine(to: CGPoint(x: 228.13, y: 4.5))
        aMUXArrowColor.setStroke()
        bezier3Path.lineWidth = 1
        bezier3Path.stroke()



        context.restoreGState()


        //// CSMuxInArrow
        context.saveGState()
        context.translateBy(x: 692, y: 648)



        //// Bezier 4 Drawing
        let bezier4Path = UIBezierPath()
        bezier4Path.move(to: CGPoint(x: 0, y: 4.5))
        bezier4Path.addLine(to: CGPoint(x: 10.11, y: 0.5))
        bezier4Path.addLine(to: CGPoint(x: 10.11, y: 3.5))
        bezier4Path.addLine(to: CGPoint(x: 10.11, y: 5.5))
        bezier4Path.addLine(to: CGPoint(x: 10.11, y: 8.5))
        bezier4Path.addLine(to: CGPoint(x: 0, y: 4.5))
        bezier4Path.close()
        cSMuxInArrowColor.setFill()
        bezier4Path.fill()


        //// Bezier 5 Drawing
        let bezier5Path = UIBezierPath()
        bezier5Path.move(to: CGPoint(x: 8.56, y: 4.5))
        bezier5Path.addLine(to: CGPoint(x: 28, y: 4.5))
        cSMuxInArrowColor.setStroke()
        bezier5Path.lineWidth = 1
        bezier5Path.stroke()



        context.restoreGState()


        //// SCkArrow
        context.saveGState()
        context.translateBy(x: 692, y: 698)



        //// Bezier 6 Drawing
        let bezier6Path = UIBezierPath()
        bezier6Path.move(to: CGPoint(x: 0, y: 4.5))
        bezier6Path.addLine(to: CGPoint(x: 10.11, y: 0.5))
        bezier6Path.addLine(to: CGPoint(x: 10.11, y: 3.5))
        bezier6Path.addLine(to: CGPoint(x: 10.11, y: 5.5))
        bezier6Path.addLine(to: CGPoint(x: 10.11, y: 8.5))
        bezier6Path.addLine(to: CGPoint(x: 0, y: 4.5))
        bezier6Path.close()
        sCkArrowColor.setFill()
        bezier6Path.fill()


        //// Bezier 7 Drawing
        let bezier7Path = UIBezierPath()
        bezier7Path.move(to: CGPoint(x: 8.56, y: 4.5))
        bezier7Path.addLine(to: CGPoint(x: 28, y: 4.5))
        sCkArrowColor.setStroke()
        bezier7Path.lineWidth = 1
        bezier7Path.stroke()



        context.restoreGState()


        //// CCkArrowColor
        context.saveGState()
        context.translateBy(x: 692, y: 733)



        //// Bezier 8 Drawing
        let bezier8Path = UIBezierPath()
        bezier8Path.move(to: CGPoint(x: 0, y: 4.5))
        bezier8Path.addLine(to: CGPoint(x: 10.11, y: 0.5))
        bezier8Path.addLine(to: CGPoint(x: 10.11, y: 3.5))
        bezier8Path.addLine(to: CGPoint(x: 10.11, y: 5.5))
        bezier8Path.addLine(to: CGPoint(x: 10.11, y: 8.5))
        bezier8Path.addLine(to: CGPoint(x: 0, y: 4.5))
        bezier8Path.close()
        cCkArrowInColor.setFill()
        bezier8Path.fill()


        //// Bezier 9 Drawing
        let bezier9Path = UIBezierPath()
        bezier9Path.move(to: CGPoint(x: 8.56, y: 4.5))
        bezier9Path.addLine(to: CGPoint(x: 28, y: 4.5))
        cCkArrowInColor.setStroke()
        bezier9Path.lineWidth = 1
        bezier9Path.stroke()



        context.restoreGState()


        //// VCkArrow
        context.saveGState()
        context.translateBy(x: 692, y: 768)



        //// Bezier 10 Drawing
        let bezier10Path = UIBezierPath()
        bezier10Path.move(to: CGPoint(x: 0, y: 4.5))
        bezier10Path.addLine(to: CGPoint(x: 10.11, y: 0.5))
        bezier10Path.addLine(to: CGPoint(x: 10.11, y: 3.5))
        bezier10Path.addLine(to: CGPoint(x: 10.11, y: 5.5))
        bezier10Path.addLine(to: CGPoint(x: 10.11, y: 8.5))
        bezier10Path.addLine(to: CGPoint(x: 0, y: 4.5))
        bezier10Path.close()
        vCkArrowColor.setFill()
        bezier10Path.fill()


        //// Bezier 11 Drawing
        let bezier11Path = UIBezierPath()
        bezier11Path.move(to: CGPoint(x: 8.56, y: 4.5))
        bezier11Path.addLine(to: CGPoint(x: 28, y: 4.5))
        vCkArrowColor.setStroke()
        bezier11Path.lineWidth = 1
        bezier11Path.stroke()



        context.restoreGState()


        //// ZCkArrow
        context.saveGState()
        context.translateBy(x: 692, y: 853)



        //// Bezier 12 Drawing
        let bezier12Path = UIBezierPath()
        bezier12Path.move(to: CGPoint(x: 0, y: 4.5))
        bezier12Path.addLine(to: CGPoint(x: 10.11, y: 0.5))
        bezier12Path.addLine(to: CGPoint(x: 10.11, y: 3.5))
        bezier12Path.addLine(to: CGPoint(x: 10.11, y: 5.5))
        bezier12Path.addLine(to: CGPoint(x: 10.11, y: 8.5))
        bezier12Path.addLine(to: CGPoint(x: 0, y: 4.5))
        bezier12Path.close()
        arrowBlack.setFill()
        bezier12Path.fill()


        //// Bezier 13 Drawing
        let bezier13Path = UIBezierPath()
        bezier13Path.move(to: CGPoint(x: 8.56, y: 4.5))
        bezier13Path.addLine(to: CGPoint(x: 28, y: 4.5))
        arrowBlack.setStroke()
        bezier13Path.lineWidth = 1
        bezier13Path.stroke()



        context.restoreGState()


        //// NCkArrow
        context.saveGState()
        context.translateBy(x: 692, y: 923)



        //// Bezier 14 Drawing
        let bezier14Path = UIBezierPath()
        bezier14Path.move(to: CGPoint(x: 0, y: 4.5))
        bezier14Path.addLine(to: CGPoint(x: 10.11, y: 0.5))
        bezier14Path.addLine(to: CGPoint(x: 10.11, y: 3.5))
        bezier14Path.addLine(to: CGPoint(x: 10.11, y: 5.5))
        bezier14Path.addLine(to: CGPoint(x: 10.11, y: 8.5))
        bezier14Path.addLine(to: CGPoint(x: 0, y: 4.5))
        bezier14Path.close()
        nCkArrowColor.setFill()
        bezier14Path.fill()


        //// Bezier 15 Drawing
        let bezier15Path = UIBezierPath()
        bezier15Path.move(to: CGPoint(x: 8.56, y: 4.5))
        bezier15Path.addLine(to: CGPoint(x: 28, y: 4.5))
        nCkArrowColor.setStroke()
        bezier15Path.lineWidth = 1
        bezier15Path.stroke()



        context.restoreGState()


        //// MemReadArrow
        context.saveGState()
        context.translateBy(x: 102, y: 983)



        //// Bezier 18 Drawing
        let bezier18Path = UIBezierPath()
        bezier18Path.move(to: CGPoint(x: 0, y: 4.5))
        bezier18Path.addLine(to: CGPoint(x: 10.11, y: 0.5))
        bezier18Path.addLine(to: CGPoint(x: 10.11, y: 3.5))
        bezier18Path.addLine(to: CGPoint(x: 10.11, y: 5.5))
        bezier18Path.addLine(to: CGPoint(x: 10.11, y: 8.5))
        bezier18Path.addLine(to: CGPoint(x: 0, y: 4.5))
        bezier18Path.close()
        memReadArrowColor.setFill()
        bezier18Path.fill()


        //// Bezier 19 Drawing
        let bezier19Path = UIBezierPath()
        bezier19Path.move(to: CGPoint(x: 8.56, y: 4.5))
        bezier19Path.addLine(to: CGPoint(x: 618, y: 4.5))
        memReadArrowColor.setStroke()
        bezier19Path.lineWidth = 1
        bezier19Path.stroke()



        context.restoreGState()


        //// MemWriteArrow
        context.saveGState()
        context.translateBy(x: 102, y: 963)



        //// Bezier 16 Drawing
        let bezier16Path = UIBezierPath()
        bezier16Path.move(to: CGPoint(x: 0, y: 4.5))
        bezier16Path.addLine(to: CGPoint(x: 10.11, y: 0.5))
        bezier16Path.addLine(to: CGPoint(x: 10.11, y: 3.5))
        bezier16Path.addLine(to: CGPoint(x: 10.11, y: 5.5))
        bezier16Path.addLine(to: CGPoint(x: 10.11, y: 8.5))
        bezier16Path.addLine(to: CGPoint(x: 0, y: 4.5))
        bezier16Path.close()
        memWriteArrowColor.setFill()
        bezier16Path.fill()


        //// Bezier 20 Drawing
        context.saveGState()
        context.translateBy(x: 58.23, y: -539.53)
        context.rotate(by: 90 * CGFloat.pi/180)

        let bezier20Path = UIBezierPath()
        bezier20Path.move(to: CGPoint(x: 0, y: 4))
        bezier20Path.addLine(to: CGPoint(x: 10.11, y: 0))
        bezier20Path.addLine(to: CGPoint(x: 10.11, y: 3))
        bezier20Path.addLine(to: CGPoint(x: 10.11, y: 5))
        bezier20Path.addLine(to: CGPoint(x: 10.11, y: 8))
        bezier20Path.addLine(to: CGPoint(x: 0, y: 4))
        bezier20Path.close()
        memWriteArrowColor.setFill()
        bezier20Path.fill()

        context.restoreGState()


        //// Bezier 21 Drawing
        context.saveGState()
        context.translateBy(x: 54.23, y: -530.97)
        context.rotate(by: 90 * CGFloat.pi/180)

        let bezier21Path = UIBezierPath()
        bezier21Path.move(to: CGPoint(x: 0, y: 0))
        bezier21Path.addLine(to: CGPoint(x: 535.89, y: 0))
        memWriteArrowColor.setStroke()
        bezier21Path.lineWidth = 1
        bezier21Path.stroke()

        context.restoreGState()


        //// Oval 8 Drawing
        let oval8Path = UIBezierPath(ovalIn: CGRect(x: 52, y: 2, width: 5, height: 5))
        memWriteArrowColor.setFill()
        oval8Path.fill()


        //// Bezier 17 Drawing
        let bezier17Path = UIBezierPath()
        bezier17Path.move(to: CGPoint(x: 8.56, y: 4.5))
        bezier17Path.addLine(to: CGPoint(x: 618, y: 4.5))
        memWriteArrowColor.setStroke()
        bezier17Path.lineWidth = 1
        bezier17Path.stroke()



        context.restoreGState()


        //// MARCkArrow
        context.saveGState()
        context.translateBy(x: 262, y: 276)



        //// Bezier 22 Drawing
        context.saveGState()
        context.translateBy(x: -0, y: 29.5)
        context.rotate(by: -90 * CGFloat.pi/180)

        let bezier22Path = UIBezierPath()
        bezier22Path.move(to: CGPoint(x: 0, y: 4))
        bezier22Path.addLine(to: CGPoint(x: 10.11, y: 0))
        bezier22Path.addLine(to: CGPoint(x: 10.11, y: 3))
        bezier22Path.addLine(to: CGPoint(x: 10.11, y: 5))
        bezier22Path.addLine(to: CGPoint(x: 10.11, y: 8))
        bezier22Path.addLine(to: CGPoint(x: 0, y: 4))
        bezier22Path.close()
        mARCkArrowColor.setFill()
        bezier22Path.fill()

        context.restoreGState()


        //// Bezier 23 Drawing
        let bezier23Path = UIBezierPath()
        bezier23Path.move(to: CGPoint(x: 4.34, y: 4.5))
        bezier23Path.addLine(to: CGPoint(x: 458, y: 4.5))
        mARCkArrowColor.setStroke()
        bezier23Path.lineWidth = 1
        bezier23Path.stroke()


        //// Bezier 24 Drawing
        context.saveGState()
        context.translateBy(x: 8, y: -21)
        context.rotate(by: 90 * CGFloat.pi/180)

        let bezier24Path = UIBezierPath()
        bezier24Path.move(to: CGPoint(x: 0, y: 4))
        bezier24Path.addLine(to: CGPoint(x: 10.11, y: 0))
        bezier24Path.addLine(to: CGPoint(x: 10.11, y: 3))
        bezier24Path.addLine(to: CGPoint(x: 10.11, y: 5))
        bezier24Path.addLine(to: CGPoint(x: 10.11, y: 8))
        bezier24Path.addLine(to: CGPoint(x: 0, y: 4))
        bezier24Path.close()
        mARCkArrowColor.setFill()
        bezier24Path.fill()

        context.restoreGState()


        //// Bezier 25 Drawing
        let bezier25Path = UIBezierPath()
        bezier25Path.move(to: CGPoint(x: 4, y: -13))
        bezier25Path.addLine(to: CGPoint(x: 4, y: 20.24))
        mARCkArrowColor.setStroke()
        bezier25Path.lineWidth = 1
        bezier25Path.stroke()


        //// Group 11
        //// Oval Drawing
        let ovalPath = UIBezierPath(ovalIn: CGRect(x: 1.5, y: 2, width: 5, height: 5))
        mARCkArrowColor.setFill()
        ovalPath.fill()





        context.restoreGState()


        //// MDRCkArrow
        context.saveGState()
        context.translateBy(x: 222, y: 356)



        //// Bezier 26 Drawing
        context.saveGState()
        context.translateBy(x: -0, y: 29.5)
        context.rotate(by: -90 * CGFloat.pi/180)

        let bezier26Path = UIBezierPath()
        bezier26Path.move(to: CGPoint(x: 0, y: 4))
        bezier26Path.addLine(to: CGPoint(x: 10.11, y: 0))
        bezier26Path.addLine(to: CGPoint(x: 10.11, y: 3))
        bezier26Path.addLine(to: CGPoint(x: 10.11, y: 5))
        bezier26Path.addLine(to: CGPoint(x: 10.11, y: 8))
        bezier26Path.addLine(to: CGPoint(x: 0, y: 4))
        bezier26Path.close()
        mDRCkArrowColor.setFill()
        bezier26Path.fill()

        context.restoreGState()


        //// Bezier 27 Drawing
        let bezier27Path = UIBezierPath()
        bezier27Path.move(to: CGPoint(x: 3.5, y: 12.5))
        bezier27Path.addLine(to: CGPoint(x: 9.5, y: 12.5))
        bezier27Path.addLine(to: CGPoint(x: 498, y: 12.5))
        mDRCkArrowColor.setStroke()
        bezier27Path.lineWidth = 1
        bezier27Path.stroke()


        //// Bezier 29 Drawing
        let bezier29Path = UIBezierPath()
        bezier29Path.move(to: CGPoint(x: 4, y: 12.5))
        bezier29Path.addLine(to: CGPoint(x: 4, y: 19.39))
        mDRCkArrowColor.setStroke()
        bezier29Path.lineWidth = 1
        bezier29Path.stroke()



        context.restoreGState()


        //// MDRMuxArrow
        context.saveGState()
        context.translateBy(x: 303.83, y: 500.38)



        //// Bezier 30 Drawing
        let bezier30Path = UIBezierPath()
        bezier30Path.move(to: CGPoint(x: 4.34, y: 4.75))
        bezier30Path.addLine(to: CGPoint(x: 416.17, y: 4.75))
        mDRMuxArrowColor.setStroke()
        bezier30Path.lineWidth = 1
        bezier30Path.stroke()


        //// Bezier 31 Drawing
        let bezier31Path = UIBezierPath()
        bezier31Path.move(to: CGPoint(x: -20.86, y: -28))
        bezier31Path.addLine(to: CGPoint(x: -10.75, y: -32))
        bezier31Path.addLine(to: CGPoint(x: -10.75, y: -29))
        bezier31Path.addLine(to: CGPoint(x: -10.75, y: -27))
        bezier31Path.addLine(to: CGPoint(x: -10.75, y: -24))
        bezier31Path.addLine(to: CGPoint(x: -20.86, y: -28))
        bezier31Path.close()
        mDRMuxArrowColor.setFill()
        bezier31Path.fill()


        //// Bezier 32 Drawing
        let bezier32Path = UIBezierPath()
        bezier32Path.move(to: CGPoint(x: 4, y: -28))
        bezier32Path.addLine(to: CGPoint(x: 4, y: 5.24))
        mDRMuxArrowColor.setStroke()
        bezier32Path.lineWidth = 1
        bezier32Path.stroke()


        //// Bezier 28 Drawing
        let bezier28Path = UIBezierPath()
        bezier28Path.move(to: CGPoint(x: -11.5, y: -28))
        bezier28Path.addLine(to: CGPoint(x: 4.5, y: -28))
        mDRMuxArrowColor.setStroke()
        bezier28Path.lineWidth = 1
        bezier28Path.stroke()



        context.restoreGState()


        //// CMuxArrow
        context.saveGState()
        context.translateBy(x: 370, y: 562)



        //// Bezier 33 Drawing
        context.saveGState()
        context.translateBy(x: -0, y: 29.5)
        context.rotate(by: -90 * CGFloat.pi/180)

        let bezier33Path = UIBezierPath()
        bezier33Path.move(to: CGPoint(x: 0, y: 4))
        bezier33Path.addLine(to: CGPoint(x: 10.11, y: 0))
        bezier33Path.addLine(to: CGPoint(x: 10.11, y: 3))
        bezier33Path.addLine(to: CGPoint(x: 10.11, y: 5))
        bezier33Path.addLine(to: CGPoint(x: 10.11, y: 8))
        bezier33Path.addLine(to: CGPoint(x: 0, y: 4))
        bezier33Path.close()
        cMuxArrowColor.setFill()
        bezier33Path.fill()

        context.restoreGState()


        //// Bezier 34 Drawing
        let bezier34Path = UIBezierPath()
        bezier34Path.move(to: CGPoint(x: 3.5, y: 12.5))
        bezier34Path.addLine(to: CGPoint(x: 7.7, y: 12.5))
        bezier34Path.addLine(to: CGPoint(x: 350, y: 12.5))
        cMuxArrowColor.setStroke()
        bezier34Path.lineWidth = 1
        bezier34Path.stroke()


        //// Bezier 35 Drawing
        let bezier35Path = UIBezierPath()
        bezier35Path.move(to: CGPoint(x: 4, y: 12.5))
        bezier35Path.addLine(to: CGPoint(x: 4, y: 19.39))
        cMuxArrowColor.setStroke()
        bezier35Path.lineWidth = 1
        bezier35Path.stroke()



        context.restoreGState()


        //// Group 15
        context.saveGState()
        context.translateBy(x: 593, y: 572)



        //// Bezier 36 Drawing
        let bezier36Path = UIBezierPath()
        bezier36Path.move(to: CGPoint(x: 0, y: 23.5))
        bezier36Path.addLine(to: CGPoint(x: 9.44, y: 19.5))
        bezier36Path.addLine(to: CGPoint(x: 9.44, y: 22.5))
        bezier36Path.addLine(to: CGPoint(x: 9.44, y: 24.5))
        bezier36Path.addLine(to: CGPoint(x: 9.44, y: 27.5))
        bezier36Path.addLine(to: CGPoint(x: 0, y: 23.5))
        bezier36Path.close()
        UIColor.black.setFill()
        bezier36Path.fill()


        //// Bezier 37 Drawing
        let bezier37Path = UIBezierPath()
        bezier37Path.move(to: CGPoint(x: 8, y: 23.43))
        bezier37Path.addLine(to: CGPoint(x: 127, y: 23.43))
        UIColor.black.setStroke()
        bezier37Path.lineWidth = 1
        bezier37Path.stroke()


        //// Bezier 38 Drawing
        let bezier38Path = UIBezierPath()
        bezier38Path.move(to: CGPoint(x: 92.14, y: 15.5))
        bezier38Path.addLine(to: CGPoint(x: 106.79, y: 31.36))
        UIColor.black.setStroke()
        bezier38Path.lineWidth = 1
        bezier38Path.stroke()


        //// Text Drawing
        let textRect = CGRect(x: 100, y: 8.43, width: 14, height: 15)
        let textTextContent = "4"
        let textStyle = NSMutableParagraphStyle()
        textStyle.alignment = .left
        let textFontAttributes = [NSAttributedStringKey.font: UIFont.systemFont(ofSize: UIFont.systemFontSize), NSAttributedStringKey.foregroundColor: UIColor.black, NSAttributedStringKey.paragraphStyle: textStyle]

        let textTextHeight: CGFloat = textTextContent.boundingRect(with: CGSize(width: textRect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: textFontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: textRect)
        textTextContent.draw(in: CGRect(x: textRect.minX, y: textRect.minY + (textRect.height - textTextHeight) / 2, width: textRect.width, height: textTextHeight), withAttributes: textFontAttributes)
        context.restoreGState()



        context.restoreGState()


        //// Group 16
        context.saveGState()
        context.translateBy(x: 638.86, y: 645.26)



        //// Bezier 40 Drawing
        let bezier40Path = UIBezierPath()
        bezier40Path.move(to: CGPoint(x: -52.86, y: -28))
        bezier40Path.addLine(to: CGPoint(x: -42.75, y: -32))
        bezier40Path.addLine(to: CGPoint(x: -42.75, y: -29))
        bezier40Path.addLine(to: CGPoint(x: -42.75, y: -27))
        bezier40Path.addLine(to: CGPoint(x: -42.75, y: -24))
        bezier40Path.addLine(to: CGPoint(x: -52.86, y: -28))
        bezier40Path.close()
        arrowBlack.setFill()
        bezier40Path.fill()


        //// Bezier 41 Drawing
        let bezier41Path = UIBezierPath()
        bezier41Path.move(to: CGPoint(x: 4, y: -28))
        bezier41Path.addLine(to: CGPoint(x: 4, y: -5.86))
        arrowBlack.setStroke()
        bezier41Path.lineWidth = 1
        bezier41Path.stroke()


        //// Bezier 42 Drawing
        let bezier42Path = UIBezierPath()
        bezier42Path.move(to: CGPoint(x: -42.98, y: -28))
        bezier42Path.addLine(to: CGPoint(x: 4.5, y: -28))
        arrowBlack.setStroke()
        bezier42Path.lineWidth = 1
        bezier42Path.stroke()



        context.restoreGState()


        //// ALUArrows
        //// Group 17
        context.saveGState()
        context.translateBy(x: 617.5, y: 652.6)



        //// Bezier 39 Drawing
        let bezier39Path = UIBezierPath()
        bezier39Path.move(to: CGPoint(x: 43.11, y: 85.14))
        bezier39Path.addLine(to: CGPoint(x: 33, y: 89.14))
        bezier39Path.addLine(to: CGPoint(x: 33, y: 86.14))
        bezier39Path.addLine(to: CGPoint(x: 33, y: 84.14))
        bezier39Path.addLine(to: CGPoint(x: 33, y: 81.14))
        bezier39Path.addLine(to: CGPoint(x: 43.11, y: 85.14))
        bezier39Path.close()
        aLULArrowsColor.setFill()
        bezier39Path.fill()


        //// Bezier 43 Drawing
        let bezier43Path = UIBezierPath()
        bezier43Path.move(to: CGPoint(x: -52.36, y: 85.37))
        bezier43Path.addLine(to: CGPoint(x: -52.36, y: -32))
        aLULArrowsColor.setStroke()
        bezier43Path.lineWidth = 1
        bezier43Path.stroke()


        //// Bezier 44 Drawing
        let bezier44Path = UIBezierPath()
        bezier44Path.move(to: CGPoint(x: 33.57, y: 85.14))
        bezier44Path.addLine(to: CGPoint(x: -52.86, y: 85.14))
        aLULArrowsColor.setStroke()
        bezier44Path.lineWidth = 1
        bezier44Path.stroke()


        //// Bezier 54 Drawing
        let bezier54Path = UIBezierPath()
        bezier54Path.move(to: CGPoint(x: 43.11, y: 50.14))
        bezier54Path.addLine(to: CGPoint(x: 33, y: 54.14))
        bezier54Path.addLine(to: CGPoint(x: 33, y: 51.14))
        bezier54Path.addLine(to: CGPoint(x: 33, y: 49.14))
        bezier54Path.addLine(to: CGPoint(x: 33, y: 46.14))
        bezier54Path.addLine(to: CGPoint(x: 43.11, y: 50.14))
        bezier54Path.close()
        aLULArrowsColor.setFill()
        bezier54Path.fill()


        //// Bezier 55 Drawing
        let bezier55Path = UIBezierPath()
        bezier55Path.move(to: CGPoint(x: 33.57, y: 50.14))
        bezier55Path.addLine(to: CGPoint(x: -52.86, y: 50.14))
        aLULArrowsColor.setStroke()
        bezier55Path.lineWidth = 1
        bezier55Path.stroke()


        //// Group
        //// Oval 2 Drawing
        let oval2Path = UIBezierPath(ovalIn: CGRect(x: -55, y: 47.4, width: 5, height: 5))
        aLULArrowsColor.setFill()
        oval2Path.fill()





        context.restoreGState()


        //// Group 18
        context.saveGState()
        context.translateBy(x: 587.5, y: 687.6)



        //// Bezier 45 Drawing
        let bezier45Path = UIBezierPath()
        bezier45Path.move(to: CGPoint(x: 73.11, y: 85.14))
        bezier45Path.addLine(to: CGPoint(x: 63, y: 89.14))
        bezier45Path.addLine(to: CGPoint(x: 63, y: 86.14))
        bezier45Path.addLine(to: CGPoint(x: 63, y: 84.14))
        bezier45Path.addLine(to: CGPoint(x: 63, y: 81.14))
        bezier45Path.addLine(to: CGPoint(x: 73.11, y: 85.14))
        bezier45Path.close()
        aLULArrowsColor.setFill()
        bezier45Path.fill()


        //// Bezier 46 Drawing
        let bezier46Path = UIBezierPath()
        bezier46Path.move(to: CGPoint(x: -52.36, y: 85.37))
        bezier46Path.addLine(to: CGPoint(x: -52.36, y: -67.18))
        aLULArrowsColor.setStroke()
        bezier46Path.lineWidth = 1
        bezier46Path.stroke()


        //// Bezier 47 Drawing
        let bezier47Path = UIBezierPath()
        bezier47Path.move(to: CGPoint(x: 63.21, y: 85.14))
        bezier47Path.addLine(to: CGPoint(x: -52.86, y: 85.14))
        aLULArrowsColor.setStroke()
        bezier47Path.lineWidth = 1
        bezier47Path.stroke()



        context.restoreGState()


        //// Group 19
        context.saveGState()
        context.translateBy(x: 557.5, y: 772.6)



        //// Bezier 48 Drawing
        let bezier48Path = UIBezierPath()
        bezier48Path.move(to: CGPoint(x: 23.11, y: 85.14))
        bezier48Path.addLine(to: CGPoint(x: 13, y: 89.14))
        bezier48Path.addLine(to: CGPoint(x: 13, y: 86.14))
        bezier48Path.addLine(to: CGPoint(x: 13, y: 84.14))
        bezier48Path.addLine(to: CGPoint(x: 13, y: 81.14))
        bezier48Path.addLine(to: CGPoint(x: 23.11, y: 85.14))
        bezier48Path.close()
        aLULArrowsColor.setFill()
        bezier48Path.fill()


        //// Bezier 49 Drawing
        let bezier49Path = UIBezierPath()
        bezier49Path.move(to: CGPoint(x: -52.36, y: 85.37))
        bezier49Path.addLine(to: CGPoint(x: -52.36, y: -152.23))
        aLULArrowsColor.setStroke()
        bezier49Path.lineWidth = 1
        bezier49Path.stroke()


        //// Bezier 50 Drawing
        let bezier50Path = UIBezierPath()
        bezier50Path.move(to: CGPoint(x: 19.87, y: 85.14))
        bezier50Path.addLine(to: CGPoint(x: -52.86, y: 85.14))
        aLULArrowsColor.setStroke()
        bezier50Path.lineWidth = 1
        bezier50Path.stroke()



        context.restoreGState()


        //// Group 20
        context.saveGState()
        context.translateBy(x: 527.5, y: 842.6)



        //// Bezier 51 Drawing
        let bezier51Path = UIBezierPath()
        bezier51Path.move(to: CGPoint(x: 133.11, y: 85.14))
        bezier51Path.addLine(to: CGPoint(x: 123, y: 89.14))
        bezier51Path.addLine(to: CGPoint(x: 123, y: 86.14))
        bezier51Path.addLine(to: CGPoint(x: 123, y: 84.14))
        bezier51Path.addLine(to: CGPoint(x: 123, y: 81.14))
        bezier51Path.addLine(to: CGPoint(x: 133.11, y: 85.14))
        bezier51Path.close()
        aLULArrowsColor.setFill()
        bezier51Path.fill()


        //// Bezier 52 Drawing
        let bezier52Path = UIBezierPath()
        bezier52Path.move(to: CGPoint(x: -52.36, y: 85.37))
        bezier52Path.addLine(to: CGPoint(x: -52.36, y: -222.62))
        aLULArrowsColor.setStroke()
        bezier52Path.lineWidth = 1
        bezier52Path.stroke()


        //// Bezier 53 Drawing
        let bezier53Path = UIBezierPath()
        bezier53Path.move(to: CGPoint(x: 123.76, y: 85.14))
        bezier53Path.addLine(to: CGPoint(x: -52.86, y: 85.14))
        aLULArrowsColor.setStroke()
        bezier53Path.lineWidth = 1
        bezier53Path.stroke()



        context.restoreGState()




        //// Group 21
        context.saveGState()
        context.translateBy(x: 682, y: 668)
        context.rotate(by: 90 * CGFloat.pi/180)



        //// Bezier 56 Drawing
        let bezier56Path = UIBezierPath()
        bezier56Path.move(to: CGPoint(x: 0, y: 4.5))
        bezier56Path.addLine(to: CGPoint(x: 10.11, y: 0.5))
        bezier56Path.addLine(to: CGPoint(x: 10.11, y: 3.5))
        bezier56Path.addLine(to: CGPoint(x: 10.11, y: 5.5))
        bezier56Path.addLine(to: CGPoint(x: 10.11, y: 8.5))
        bezier56Path.addLine(to: CGPoint(x: 0, y: 4.5))
        bezier56Path.close()
        UIColor.black.setFill()
        bezier56Path.fill()


        //// Bezier 57 Drawing
        let bezier57Path = UIBezierPath()
        bezier57Path.move(to: CGPoint(x: 8.56, y: 4.5))
        bezier57Path.addLine(to: CGPoint(x: 22.36, y: 4.5))
        UIColor.black.setStroke()
        bezier57Path.lineWidth = 1
        bezier57Path.stroke()



        context.restoreGState()


        //// CBitArrow
        context.saveGState()
        context.translateBy(x: 362, y: 750)



        //// Bezier 58 Drawing
        let bezier58Path = UIBezierPath()
        bezier58Path.move(to: CGPoint(x: 0, y: 4.5))
        bezier58Path.addLine(to: CGPoint(x: 10.11, y: 0.5))
        bezier58Path.addLine(to: CGPoint(x: 10.11, y: 3.5))
        bezier58Path.addLine(to: CGPoint(x: 10.11, y: 5.5))
        bezier58Path.addLine(to: CGPoint(x: 10.11, y: 8.5))
        bezier58Path.addLine(to: CGPoint(x: 0, y: 4.5))
        bezier58Path.close()
        cBitArrowColor.setFill()
        bezier58Path.fill()


        //// Bezier 59 Drawing
        let bezier59Path = UIBezierPath()
        bezier59Path.move(to: CGPoint(x: 8.56, y: 4.5))
        bezier59Path.addLine(to: CGPoint(x: 349.14, y: 4.5))
        cBitArrowColor.setStroke()
        bezier59Path.lineWidth = 1
        bezier59Path.stroke()


        //// Bezier 61 Drawing
        context.saveGState()
        context.translateBy(x: 315.63, y: 3.87)
        context.rotate(by: -90 * CGFloat.pi/180)

        let bezier61Path = UIBezierPath()
        bezier61Path.move(to: CGPoint(x: 34.72, y: 0))
        bezier61Path.addLine(to: CGPoint(x: 0, y: 0))
        cBitArrowColor.setStroke()
        bezier61Path.lineWidth = 1
        bezier61Path.stroke()

        context.restoreGState()


        //// Bezier 62 Drawing
        context.saveGState()
        context.translateBy(x: 258.88, y: -73.01)
        context.rotate(by: -90 * CGFloat.pi/180)

        let bezier62Path = UIBezierPath()
        bezier62Path.move(to: CGPoint(x: 10.11, y: 4))
        bezier62Path.addLine(to: CGPoint(x: 0, y: 0))
        bezier62Path.addLine(to: CGPoint(x: 0, y: 3))
        bezier62Path.addLine(to: CGPoint(x: 0, y: 5))
        bezier62Path.addLine(to: CGPoint(x: 0, y: 8))
        bezier62Path.addLine(to: CGPoint(x: 10.11, y: 4))
        bezier62Path.close()
        cBitArrowColor.setFill()
        bezier62Path.fill()

        context.restoreGState()


        //// Bezier 63 Drawing
        context.saveGState()
        context.translateBy(x: 262.88, y: -31.19)
        context.rotate(by: -90 * CGFloat.pi/180)

        let bezier63Path = UIBezierPath()
        bezier63Path.move(to: CGPoint(x: 0, y: 0))
        bezier63Path.addLine(to: CGPoint(x: 0, y: 53.24))
        cBitArrowColor.setStroke()
        bezier63Path.lineWidth = 1
        bezier63Path.stroke()

        context.restoreGState()


        //// Bezier 64 Drawing
        context.saveGState()
        context.translateBy(x: 262.88, y: -30.69)
        context.rotate(by: -90 * CGFloat.pi/180)

        let bezier64Path = UIBezierPath()
        bezier64Path.move(to: CGPoint(x: 44.12, y: 0))
        bezier64Path.addLine(to: CGPoint(x: 0, y: 0))
        cBitArrowColor.setStroke()
        bezier64Path.lineWidth = 1
        bezier64Path.stroke()

        context.restoreGState()


        //// Oval 3 Drawing
        let oval3Path = UIBezierPath(ovalIn: CGRect(x: 313, y: 2, width: 5, height: 5))
        cBitArrowColor.setFill()
        oval3Path.fill()


        //// Bezier 60 Drawing
        let bezier60Path = UIBezierPath()
        bezier60Path.move(to: CGPoint(x: 358, y: 4.5))
        bezier60Path.addLine(to: CGPoint(x: 347.89, y: 0.5))
        bezier60Path.addLine(to: CGPoint(x: 347.89, y: 3.5))
        bezier60Path.addLine(to: CGPoint(x: 347.89, y: 5.5))
        bezier60Path.addLine(to: CGPoint(x: 347.89, y: 8.5))
        bezier60Path.addLine(to: CGPoint(x: 358, y: 4.5))
        bezier60Path.close()
        cBitArrowColor.setFill()
        bezier60Path.fill()



        context.restoreGState()


        //// VBitArrow
        context.saveGState()
        context.translateBy(x: 382.83, y: 807.38)



        //// Bezier 65 Drawing
        let bezier65Path = UIBezierPath()
        bezier65Path.move(to: CGPoint(x: 63.34, y: -10.25))
        bezier65Path.addLine(to: CGPoint(x: 331.52, y: -10.25))
        vBitArrowColor.setStroke()
        bezier65Path.lineWidth = 1
        bezier65Path.stroke()


        //// Oval 4 Drawing
        let oval4Path = UIBezierPath(ovalIn: CGRect(x: 292.5, y: -13, width: 5, height: 5))
        vBitArrowColor.setFill()
        oval4Path.fill()


        //// Bezier 66 Drawing
        let bezier66Path = UIBezierPath()
        bezier66Path.move(to: CGPoint(x: -20.86, y: -28))
        bezier66Path.addLine(to: CGPoint(x: -10.75, y: -32))
        bezier66Path.addLine(to: CGPoint(x: -10.75, y: -29))
        bezier66Path.addLine(to: CGPoint(x: -10.75, y: -27))
        bezier66Path.addLine(to: CGPoint(x: -10.75, y: -24))
        bezier66Path.addLine(to: CGPoint(x: -20.86, y: -28))
        bezier66Path.close()
        vBitArrowColor.setFill()
        bezier66Path.fill()


        //// Bezier 67 Drawing
        let bezier67Path = UIBezierPath()
        bezier67Path.move(to: CGPoint(x: 64, y: -28))
        bezier67Path.addLine(to: CGPoint(x: 64, y: -9.69))
        vBitArrowColor.setStroke()
        bezier67Path.lineWidth = 1
        bezier67Path.stroke()


        //// Bezier 68 Drawing
        let bezier68Path = UIBezierPath()
        bezier68Path.move(to: CGPoint(x: -12.03, y: -28))
        bezier68Path.addLine(to: CGPoint(x: 64.56, y: -28))
        vBitArrowColor.setStroke()
        bezier68Path.lineWidth = 1
        bezier68Path.stroke()


        //// Bezier 69 Drawing
        let bezier69Path = UIBezierPath()
        bezier69Path.move(to: CGPoint(x: 295, y: -21.91))
        bezier69Path.addLine(to: CGPoint(x: 295, y: -9.69))
        vBitArrowColor.setStroke()
        bezier69Path.lineWidth = 1
        bezier69Path.stroke()


        //// Bezier 70 Drawing
        let bezier70Path = UIBezierPath()
        bezier70Path.move(to: CGPoint(x: 337.17, y: -10.25))
        bezier70Path.addLine(to: CGPoint(x: 327.06, y: -14.25))
        bezier70Path.addLine(to: CGPoint(x: 327.06, y: -11.25))
        bezier70Path.addLine(to: CGPoint(x: 327.06, y: -9.25))
        bezier70Path.addLine(to: CGPoint(x: 327.06, y: -6.25))
        bezier70Path.addLine(to: CGPoint(x: 337.17, y: -10.25))
        bezier70Path.close()
        vBitArrowColor.setFill()
        bezier70Path.fill()



        context.restoreGState()


        //// ZBitArrow
        context.saveGState()
        context.translateBy(x: 383.18, y: 833.13)



        //// Bezier 71 Drawing
        let bezier71Path = UIBezierPath()
        bezier71Path.move(to: CGPoint(x: 34.34, y: 54.75))
        bezier71Path.addLine(to: CGPoint(x: 331.56, y: 54.75))
        zBitArrowColor.setStroke()
        bezier71Path.lineWidth = 1
        bezier71Path.stroke()


        //// Bezier 72 Drawing
        let bezier72Path = UIBezierPath()
        bezier72Path.move(to: CGPoint(x: -20.86, y: -28))
        bezier72Path.addLine(to: CGPoint(x: -10.75, y: -32))
        bezier72Path.addLine(to: CGPoint(x: -10.75, y: -29))
        bezier72Path.addLine(to: CGPoint(x: -10.75, y: -27))
        bezier72Path.addLine(to: CGPoint(x: -10.75, y: -24))
        bezier72Path.addLine(to: CGPoint(x: -20.86, y: -28))
        bezier72Path.close()
        zBitArrowColor.setFill()
        bezier72Path.fill()


        //// Bezier 73 Drawing
        let bezier73Path = UIBezierPath()
        bezier73Path.move(to: CGPoint(x: 34, y: -28))
        bezier73Path.addLine(to: CGPoint(x: 34, y: 55.31))
        zBitArrowColor.setStroke()
        bezier73Path.lineWidth = 1
        bezier73Path.stroke()


        //// Bezier 74 Drawing
        let bezier74Path = UIBezierPath()
        bezier74Path.move(to: CGPoint(x: -13.02, y: -28))
        bezier74Path.addLine(to: CGPoint(x: 34.5, y: -28))
        zBitArrowColor.setStroke()
        bezier74Path.lineWidth = 1
        bezier74Path.stroke()


        //// Bezier 75 Drawing
        let bezier75Path = UIBezierPath()
        bezier75Path.move(to: CGPoint(x: 295, y: 37.09))
        bezier75Path.addLine(to: CGPoint(x: 295, y: 55.31))
        zBitArrowColor.setStroke()
        bezier75Path.lineWidth = 1
        bezier75Path.stroke()


        //// Bezier 76 Drawing
        context.saveGState()
        context.translateBy(x: 224.89, y: 49.75)
        context.rotate(by: -90 * CGFloat.pi/180)

        let bezier76Path = UIBezierPath()
        bezier76Path.move(to: CGPoint(x: 10.11, y: 4))
        bezier76Path.addLine(to: CGPoint(x: 0, y: 0))
        bezier76Path.addLine(to: CGPoint(x: 0, y: 3))
        bezier76Path.addLine(to: CGPoint(x: 0, y: 5))
        bezier76Path.addLine(to: CGPoint(x: 0, y: 8))
        bezier76Path.addLine(to: CGPoint(x: 10.11, y: 4))
        bezier76Path.close()
        zBitArrowColor.setFill()
        bezier76Path.fill()

        context.restoreGState()


        //// Bezier 77 Drawing
        let bezier77Path = UIBezierPath()
        bezier77Path.move(to: CGPoint(x: 337.17, y: 54.75))
        bezier77Path.addLine(to: CGPoint(x: 327.06, y: 50.75))
        bezier77Path.addLine(to: CGPoint(x: 327.06, y: 53.75))
        bezier77Path.addLine(to: CGPoint(x: 327.06, y: 55.75))
        bezier77Path.addLine(to: CGPoint(x: 327.06, y: 58.75))
        bezier77Path.addLine(to: CGPoint(x: 337.17, y: 54.75))
        bezier77Path.close()
        zBitArrowColor.setFill()
        bezier77Path.fill()


        //// Bezier 78 Drawing
        let bezier78Path = UIBezierPath()
        bezier78Path.move(to: CGPoint(x: 229, y: 47.06))
        bezier78Path.addLine(to: CGPoint(x: 229, y: 55.31))
        zBitArrowColor.setStroke()
        bezier78Path.lineWidth = 1
        bezier78Path.stroke()


        //// Oval 6 Drawing
        let oval6Path = UIBezierPath(ovalIn: CGRect(x: 292.5, y: 52, width: 5, height: 5))
        zBitArrowColor.setFill()
        oval6Path.fill()


        //// Oval 5 Drawing
        let oval5Path = UIBezierPath(ovalIn: CGRect(x: 226.5, y: 52, width: 5, height: 5))
        zBitArrowColor.setFill()
        oval5Path.fill()



        context.restoreGState()


        //// AndZArrowOut
        context.saveGState()
        context.translateBy(x: 635, y: 853)



        //// Bezier 79 Drawing
        let bezier79Path = UIBezierPath()
        bezier79Path.move(to: CGPoint(x: 28, y: 4.5))
        bezier79Path.addLine(to: CGPoint(x: 17.89, y: 0.5))
        bezier79Path.addLine(to: CGPoint(x: 17.89, y: 3.5))
        bezier79Path.addLine(to: CGPoint(x: 17.89, y: 5.5))
        bezier79Path.addLine(to: CGPoint(x: 17.89, y: 8.5))
        bezier79Path.addLine(to: CGPoint(x: 28, y: 4.5))
        bezier79Path.close()
        andZArrowOutColor.setFill()
        bezier79Path.fill()


        //// Bezier 80 Drawing
        let bezier80Path = UIBezierPath()
        bezier80Path.move(to: CGPoint(x: 19.44, y: 4.5))
        bezier80Path.addLine(to: CGPoint(x: 5.3, y: 4.5))
        andZArrowOutColor.setStroke()
        bezier80Path.lineWidth = 1
        bezier80Path.stroke()



        context.restoreGState()


        //// AndZArrowColor
        context.saveGState()
        context.translateBy(x: 640, y: 789.5)
        context.rotate(by: -90 * CGFloat.pi/180)



        //// Bezier 81 Drawing
        let bezier81Path = UIBezierPath()
        bezier81Path.move(to: CGPoint(x: -52.86, y: -28))
        bezier81Path.addLine(to: CGPoint(x: -42.75, y: -32))
        bezier81Path.addLine(to: CGPoint(x: -42.75, y: -29))
        bezier81Path.addLine(to: CGPoint(x: -42.75, y: -27))
        bezier81Path.addLine(to: CGPoint(x: -42.75, y: -24))
        bezier81Path.addLine(to: CGPoint(x: -52.86, y: -28))
        bezier81Path.close()
        andZArrowInColor.setFill()
        bezier81Path.fill()


        //// Bezier 82 Drawing
        let bezier82Path = UIBezierPath()
        bezier82Path.move(to: CGPoint(x: -33, y: -28))
        bezier82Path.addLine(to: CGPoint(x: -33, y: 80))
        andZArrowInColor.setStroke()
        bezier82Path.lineWidth = 1
        bezier82Path.stroke()


        //// Bezier 83 Drawing
        let bezier83Path = UIBezierPath()
        bezier83Path.move(to: CGPoint(x: -44.11, y: -28))
        bezier83Path.addLine(to: CGPoint(x: -32.5, y: -28))
        andZArrowInColor.setStroke()
        bezier83Path.lineWidth = 1
        bezier83Path.stroke()



        context.restoreGState()


        //// NBitArrow
        context.saveGState()
        context.translateBy(x: 382.83, y: 893.38)



        //// Bezier 84 Drawing
        let bezier84Path = UIBezierPath()
        bezier84Path.move(to: CGPoint(x: 4.34, y: 54.75))
        bezier84Path.addLine(to: CGPoint(x: 330.15, y: 54.75))
        nBitArrowColor.setStroke()
        bezier84Path.lineWidth = 1
        bezier84Path.stroke()


        //// Bezier 85 Drawing
        let bezier85Path = UIBezierPath()
        bezier85Path.move(to: CGPoint(x: -20.86, y: -64))
        bezier85Path.addLine(to: CGPoint(x: -10.75, y: -68))
        bezier85Path.addLine(to: CGPoint(x: -10.75, y: -65))
        bezier85Path.addLine(to: CGPoint(x: -10.75, y: -63))
        bezier85Path.addLine(to: CGPoint(x: -10.75, y: -60))
        bezier85Path.addLine(to: CGPoint(x: -20.86, y: -64))
        bezier85Path.close()
        nBitArrowColor.setFill()
        bezier85Path.fill()


        //// Bezier 86 Drawing
        let bezier86Path = UIBezierPath()
        bezier86Path.move(to: CGPoint(x: 4, y: -64.61))
        bezier86Path.addLine(to: CGPoint(x: 4, y: 55.31))
        nBitArrowColor.setStroke()
        bezier86Path.lineWidth = 1
        bezier86Path.stroke()


        //// Bezier 87 Drawing
        let bezier87Path = UIBezierPath()
        bezier87Path.move(to: CGPoint(x: -11.5, y: -64))
        bezier87Path.addLine(to: CGPoint(x: 4.5, y: -64))
        nBitArrowColor.setStroke()
        bezier87Path.lineWidth = 1
        bezier87Path.stroke()


        //// Bezier 88 Drawing
        let bezier88Path = UIBezierPath()
        bezier88Path.move(to: CGPoint(x: 295, y: 46.91))
        bezier88Path.addLine(to: CGPoint(x: 295, y: 55.31))
        nBitArrowColor.setStroke()
        bezier88Path.lineWidth = 1
        bezier88Path.stroke()


        //// Oval 7 Drawing
        let oval7Path = UIBezierPath(ovalIn: CGRect(x: 292.5, y: 52, width: 5, height: 5))
        nBitArrowColor.setFill()
        oval7Path.fill()


        //// Bezier 90 Drawing
        let bezier90Path = UIBezierPath()
        bezier90Path.move(to: CGPoint(x: 337.17, y: 54.75))
        bezier90Path.addLine(to: CGPoint(x: 327.06, y: 50.75))
        bezier90Path.addLine(to: CGPoint(x: 327.06, y: 53.75))
        bezier90Path.addLine(to: CGPoint(x: 327.06, y: 55.75))
        bezier90Path.addLine(to: CGPoint(x: 327.06, y: 58.75))
        bezier90Path.addLine(to: CGPoint(x: 337.17, y: 54.75))
        bezier90Path.close()
        nBitArrowColor.setFill()
        bezier90Path.fill()



        context.restoreGState()




        //// RegisterBank Drawing
        let registerBankPath = UIBezierPath(rect: CGRect(x: 55, y: 9.51, width: 553, height: 175.49))
        registerBankColor.setFill()
        registerBankPath.fill()
        UIColor.black.setStroke()
        registerBankPath.lineWidth = 1
        registerBankPath.stroke()


        //// BBus Drawing
        let bBusPath = UIBezierPath()
        bBusPath.move(to: CGPoint(x: 570, y: 500))
        bBusPath.addLine(to: CGPoint(x: 580, y: 500))
        bBusPath.addLine(to: CGPoint(x: 562.5, y: 525))
        bBusPath.addLine(to: CGPoint(x: 545, y: 500))
        bBusPath.addLine(to: CGPoint(x: 555, y: 500))
        bBusPath.addLine(to: CGPoint(x: 555, y: 245))
        bBusPath.addLine(to: CGPoint(x: 315, y: 245))
        bBusPath.addLine(to: CGPoint(x: 315, y: 255))
        bBusPath.addLine(to: CGPoint(x: 290, y: 238.75))
        bBusPath.addLine(to: CGPoint(x: 315, y: 220))
        bBusPath.addLine(to: CGPoint(x: 315, y: 230))
        bBusPath.addLine(to: CGPoint(x: 555, y: 230))
        bBusPath.addLine(to: CGPoint(x: 555, y: 185))
        bBusPath.addLine(to: CGPoint(x: 570, y: 185))
        bBusPath.addLine(to: CGPoint(x: 570, y: 500))
        bBusPath.close()
        bBusPipeColor.setFill()
        bBusPath.fill()
        UIColor.black.setStroke()
        bBusPath.lineWidth = 1
        bBusPath.stroke()


        //// ABus Drawing
        let aBusPath = UIBezierPath()
        aBusPath.move(to: CGPoint(x: 475, y: 420))
        aBusPath.addLine(to: CGPoint(x: 485, y: 420))
        aBusPath.addLine(to: CGPoint(x: 467.5, y: 445))
        aBusPath.addLine(to: CGPoint(x: 450, y: 420))
        aBusPath.addLine(to: CGPoint(x: 460, y: 420))
        aBusPath.addLine(to: CGPoint(x: 460, y: 330))
        aBusPath.addLine(to: CGPoint(x: 315, y: 330))
        aBusPath.addLine(to: CGPoint(x: 315, y: 340))
        aBusPath.addLine(to: CGPoint(x: 290, y: 323.75))
        aBusPath.addLine(to: CGPoint(x: 315, y: 305))
        aBusPath.addLine(to: CGPoint(x: 315, y: 315))
        aBusPath.addLine(to: CGPoint(x: 460, y: 315))
        aBusPath.addLine(to: CGPoint(x: 460, y: 185))
        aBusPath.addLine(to: CGPoint(x: 475, y: 185))
        aBusPath.addLine(to: CGPoint(x: 475, y: 420))
        aBusPath.close()
        aBusPipeColor.setFill()
        aBusPath.fill()
        UIColor.black.setStroke()
        aBusPath.lineWidth = 1
        aBusPath.stroke()


        //// ALU Drawing
        let aLUPath = UIBezierPath()
        aLUPath.move(to: CGPoint(x: 388, y: 530))
        aLUPath.addLine(to: CGPoint(x: 473, y: 530))
        aLUPath.addLine(to: CGPoint(x: 483, y: 550))
        aLUPath.addLine(to: CGPoint(x: 512.64, y: 550))
        aLUPath.addLine(to: CGPoint(x: 523, y: 530))
        aLUPath.addLine(to: CGPoint(x: 608, y: 530))
        aLUPath.addLine(to: CGPoint(x: 578, y: 620))
        aLUPath.addLine(to: CGPoint(x: 418, y: 620))
        aLUPath.addLine(to: CGPoint(x: 388, y: 530))
        aLUPath.close()
        aLUColor.setFill()
        aLUPath.fill()
        UIColor.black.setStroke()
        aLUPath.lineWidth = 1
        aLUPath.stroke()


        //// AMux(combo) Drawing
        let aMuxcomboPath = UIBezierPath()
        aMuxcomboPath.move(to: CGPoint(x: 485, y: 450))
        aMuxcomboPath.addLine(to: CGPoint(x: 485, y: 475))
        aMuxcomboPath.addLine(to: CGPoint(x: 435, y: 475))
        aMuxcomboPath.addLine(to: CGPoint(x: 435, y: 500))
        aMuxcomboPath.addLine(to: CGPoint(x: 445, y: 500))
        aMuxcomboPath.addLine(to: CGPoint(x: 427.5, y: 525))
        aMuxcomboPath.addLine(to: CGPoint(x: 410, y: 500))
        aMuxcomboPath.addLine(to: CGPoint(x: 420, y: 500))
        aMuxcomboPath.addLine(to: CGPoint(x: 420.17, y: 475))
        aMuxcomboPath.addLine(to: CGPoint(x: 435, y: 475))
        aMuxcomboPath.addLine(to: CGPoint(x: 420.17, y: 475))
        aMuxcomboPath.addLine(to: CGPoint(x: 370, y: 475))
        aMuxcomboPath.addLine(to: CGPoint(x: 370, y: 450))
        aMuxcomboPath.addLine(to: CGPoint(x: 420, y: 450))
        aMuxcomboPath.addLine(to: CGPoint(x: 435, y: 450))
        aMuxcomboPath.addLine(to: CGPoint(x: 485, y: 450))
        aMuxcomboPath.close()
        aMuxComboColor.setFill()
        aMuxcomboPath.fill()
        UIColor.black.setStroke()
        aMuxcomboPath.lineWidth = 1
        aMuxcomboPath.stroke()


        //// MARB Drawing
        let mARBPath = UIBezierPath(rect: CGRect(x: 179.5, y: 225, width: 100, height: 25))
        mARBColor.setFill()
        mARBPath.fill()
        UIColor.black.setStroke()
        mARBPath.lineWidth = 1
        mARBPath.stroke()


        //// MARA Drawing
        let mARAPath = UIBezierPath(rect: CGRect(x: 180, y: 310, width: 100, height: 25))
        mARAColor.setFill()
        mARAPath.fill()
        UIColor.black.setStroke()
        mARAPath.lineWidth = 1
        mARAPath.stroke()


        //// MARArrow Drawing
        let mARArrowPath = UIBezierPath()
        mARArrowPath.move(to: CGPoint(x: 239.59, y: 250))
        mARArrowPath.addCurve(to: CGPoint(x: 239.59, y: 279.87), controlPoint1: CGPoint(x: 239.59, y: 250), controlPoint2: CGPoint(x: 239.59, y: 276.94))
        mARArrowPath.addCurve(to: CGPoint(x: 239.59, y: 280.13), controlPoint1: CGPoint(x: 239.59, y: 280.04), controlPoint2: CGPoint(x: 239.59, y: 280.13))
        mARArrowPath.addCurve(to: CGPoint(x: 129.59, y: 280.13), controlPoint1: CGPoint(x: 239.59, y: 280.59), controlPoint2: CGPoint(x: 129.59, y: 280.13))
        mARArrowPath.addLine(to: CGPoint(x: 239.59, y: 280.13))
        mARArrowPath.addLine(to: CGPoint(x: 239.59, y: 310))
        mARArrowPath.addLine(to: CGPoint(x: 224.59, y: 310))
        mARArrowPath.addLine(to: CGPoint(x: 224.59, y: 294.87))
        mARArrowPath.addLine(to: CGPoint(x: 129.59, y: 294.87))
        mARArrowPath.addLine(to: CGPoint(x: 129.59, y: 304.87))
        mARArrowPath.addCurve(to: CGPoint(x: 105.74, y: 279.87), controlPoint1: CGPoint(x: 129.59, y: 304.87), controlPoint2: CGPoint(x: 105.58, y: 279.87))
        mARArrowPath.addCurve(to: CGPoint(x: 121.46, y: 263.57), controlPoint1: CGPoint(x: 107.23, y: 278.33), controlPoint2: CGPoint(x: 115.15, y: 270.12))
        mARArrowPath.addCurve(to: CGPoint(x: 129.59, y: 255.13), controlPoint1: CGPoint(x: 125.93, y: 258.93), controlPoint2: CGPoint(x: 129.59, y: 255.13))
        mARArrowPath.addLine(to: CGPoint(x: 129.59, y: 265.13))
        mARArrowPath.addLine(to: CGPoint(x: 224.59, y: 265.13))
        mARArrowPath.addLine(to: CGPoint(x: 224.59, y: 250))
        mARArrowPath.addLine(to: CGPoint(x: 239.59, y: 250))
        mARArrowPath.addLine(to: CGPoint(x: 239.59, y: 250))
        mARArrowPath.close()
        mARArrowColor.setFill()
        mARArrowPath.fill()
        UIColor.black.setStroke()
        mARArrowPath.lineWidth = 1
        mARArrowPath.stroke()


        //// SystemBus
        //// Rectangle Drawing
        let rectanglePath = UIBezierPath(rect: CGRect(x: 55, y: 248.62, width: 29, height: 752.12))
        systemBusColor.setFill()
        rectanglePath.fill()
        UIColor.black.setStroke()
        rectanglePath.lineWidth = 1
        rectanglePath.stroke()


        //// SystemBus2 Drawing
        let systemBus2Path = UIBezierPath(rect: CGRect(x: 84, y: 381.62, width: 10, height: 619.12))
        systemBusColor.setFill()
        systemBus2Path.fill()
        UIColor.black.setStroke()
        systemBus2Path.lineWidth = 1
        systemBus2Path.stroke()




        //// MDRCk Drawing
        let mDRCkPath = UIBezierPath(rect: CGRect(x: 180, y: 390, width: 100, height: 25))
        registerBankColor.setFill()
        mDRCkPath.fill()
        UIColor.black.setStroke()
        mDRCkPath.lineWidth = 1
        mDRCkPath.stroke()


        //// MDRCktoAMux Drawing
        let mDRCktoAMuxPath = UIBezierPath()
        mDRCktoAMuxPath.move(to: CGPoint(x: 400, y: 420))
        mDRCktoAMuxPath.addLine(to: CGPoint(x: 410, y: 420))
        mDRCktoAMuxPath.addLine(to: CGPoint(x: 392.5, y: 445))
        mDRCktoAMuxPath.addLine(to: CGPoint(x: 375, y: 420))
        mDRCktoAMuxPath.addLine(to: CGPoint(x: 385, y: 420))
        mDRCktoAMuxPath.addLine(to: CGPoint(x: 385, y: 410))
        mDRCktoAMuxPath.addLine(to: CGPoint(x: 280, y: 410))
        mDRCktoAMuxPath.addLine(to: CGPoint(x: 280, y: 395))
        mDRCktoAMuxPath.addLine(to: CGPoint(x: 385, y: 395))
        mDRCktoAMuxPath.addLine(to: CGPoint(x: 400, y: 395))
        mDRCktoAMuxPath.addLine(to: CGPoint(x: 400, y: 420))
        mDRCktoAMuxPath.close()
        mDRCktoAMuxColor.setFill()
        mDRCktoAMuxPath.fill()
        UIColor.black.setStroke()
        mDRCktoAMuxPath.lineWidth = 1
        mDRCktoAMuxPath.stroke()


        //// MDRMux Drawing
        let mDRMuxPath = UIBezierPath()
        mDRMuxPath.move(to: CGPoint(x: 280, y: 485))
        mDRMuxPath.addLine(to: CGPoint(x: 280, y: 460))
        mDRMuxPath.addLine(to: CGPoint(x: 237, y: 460))
        mDRMuxPath.addLine(to: CGPoint(x: 237, y: 445))
        mDRMuxPath.addLine(to: CGPoint(x: 247, y: 445))
        mDRMuxPath.addLine(to: CGPoint(x: 229.5, y: 420))
        mDRMuxPath.addLine(to: CGPoint(x: 212, y: 445))
        mDRMuxPath.addLine(to: CGPoint(x: 222, y: 445))
        mDRMuxPath.addLine(to: CGPoint(x: 222.17, y: 460))
        mDRMuxPath.addLine(to: CGPoint(x: 237, y: 460))
        mDRMuxPath.addLine(to: CGPoint(x: 222.17, y: 460))
        mDRMuxPath.addLine(to: CGPoint(x: 179, y: 460))
        mDRMuxPath.addLine(to: CGPoint(x: 179, y: 485))
        mDRMuxPath.addLine(to: CGPoint(x: 222, y: 485))
        mDRMuxPath.addLine(to: CGPoint(x: 237, y: 485))
        mDRMuxPath.addLine(to: CGPoint(x: 280, y: 485))
        mDRMuxPath.close()
        mDRMuxColor.setFill()
        mDRMuxPath.fill()
        UIColor.black.setStroke()
        mDRMuxPath.lineWidth = 1
        mDRMuxPath.stroke()


        //// CMux Drawing
        let cMuxPath = UIBezierPath()
        cMuxPath.move(to: CGPoint(x: 343.5, y: 190))
        cMuxPath.addCurve(to: CGPoint(x: 361, y: 215), controlPoint1: CGPoint(x: 343.5, y: 190), controlPoint2: CGPoint(x: 361, y: 215))
        cMuxPath.addLine(to: CGPoint(x: 351, y: 215))
        cMuxPath.addLine(to: CGPoint(x: 351, y: 594))
        cMuxPath.addLine(to: CGPoint(x: 336.17, y: 594))
        cMuxPath.addLine(to: CGPoint(x: 351, y: 594))
        cMuxPath.addLine(to: CGPoint(x: 394, y: 594))
        cMuxPath.addLine(to: CGPoint(x: 394, y: 619))
        cMuxPath.addLine(to: CGPoint(x: 293, y: 619))
        cMuxPath.addLine(to: CGPoint(x: 293, y: 594))
        cMuxPath.addLine(to: CGPoint(x: 336.17, y: 594))
        cMuxPath.addCurve(to: CGPoint(x: 336.16, y: 567.92), controlPoint1: CGPoint(x: 336.17, y: 594), controlPoint2: CGPoint(x: 336.16, y: 584.27))
        cMuxPath.addCurve(to: CGPoint(x: 336.15, y: 544), controlPoint1: CGPoint(x: 336.15, y: 561.04), controlPoint2: CGPoint(x: 336.15, y: 552.99))
        cMuxPath.addLine(to: CGPoint(x: 251, y: 544))
        cMuxPath.addLine(to: CGPoint(x: 251, y: 519))
        cMuxPath.addLine(to: CGPoint(x: 241, y: 519))
        cMuxPath.addLine(to: CGPoint(x: 258.5, y: 494))
        cMuxPath.addLine(to: CGPoint(x: 276, y: 519))
        cMuxPath.addLine(to: CGPoint(x: 266, y: 519))
        cMuxPath.addLine(to: CGPoint(x: 266, y: 529))
        cMuxPath.addLine(to: CGPoint(x: 336.14, y: 529))
        cMuxPath.addCurve(to: CGPoint(x: 336, y: 215), controlPoint1: CGPoint(x: 336.09, y: 420.68), controlPoint2: CGPoint(x: 336, y: 215))
        cMuxPath.addLine(to: CGPoint(x: 326, y: 215))
        cMuxPath.addLine(to: CGPoint(x: 343.5, y: 190))
        cMuxPath.addLine(to: CGPoint(x: 343.5, y: 190))
        cMuxPath.close()
        cBusPipeColor.setFill()
        cMuxPath.fill()
        UIColor.black.setStroke()
        cMuxPath.lineWidth = 1
        cMuxPath.stroke()


        //// MemWrite Drawing
        let memWritePath = UIBezierPath()
        memWritePath.move(to: CGPoint(x: 180, y: 410))
        memWritePath.addLine(to: CGPoint(x: 135, y: 410))
        memWritePath.addLine(to: CGPoint(x: 135, y: 420))
        memWritePath.addLine(to: CGPoint(x: 110, y: 403.75))
        memWritePath.addLine(to: CGPoint(x: 135, y: 385))
        memWritePath.addLine(to: CGPoint(x: 135, y: 395))
        memWritePath.addLine(to: CGPoint(x: 180, y: 395))
        memWritePath.addLine(to: CGPoint(x: 180, y: 410))
        memWritePath.close()
        memWriteColor.setFill()
        memWritePath.fill()
        UIColor.black.setStroke()
        memWritePath.lineWidth = 1
        memWritePath.stroke()


        //// BustoMDRMux Drawing
        let bustoMDRMuxPath = UIBezierPath()
        bustoMDRMuxPath.move(to: CGPoint(x: 207, y: 518))
        bustoMDRMuxPath.addLine(to: CGPoint(x: 217, y: 518))
        bustoMDRMuxPath.addLine(to: CGPoint(x: 199.5, y: 493))
        bustoMDRMuxPath.addLine(to: CGPoint(x: 182, y: 518))
        bustoMDRMuxPath.addLine(to: CGPoint(x: 192, y: 518))
        bustoMDRMuxPath.addLine(to: CGPoint(x: 192, y: 528))
        bustoMDRMuxPath.addLine(to: CGPoint(x: 94, y: 528))
        bustoMDRMuxPath.addLine(to: CGPoint(x: 94, y: 543))
        bustoMDRMuxPath.addLine(to: CGPoint(x: 192, y: 543))
        bustoMDRMuxPath.addLine(to: CGPoint(x: 207, y: 543))
        bustoMDRMuxPath.addLine(to: CGPoint(x: 207, y: 518))
        bustoMDRMuxPath.close()
        bustoMDRMuxColor.setFill()
        bustoMDRMuxPath.fill()
        UIColor.black.setStroke()
        bustoMDRMuxPath.lineWidth = 1
        bustoMDRMuxPath.stroke()


        //// ALUtoCMux Drawing
        let aLUtoCMuxPath = UIBezierPath()
        aLUtoCMuxPath.move(to: CGPoint(x: 379.5, y: 627.5))
        aLUtoCMuxPath.addCurve(to: CGPoint(x: 397, y: 652.5), controlPoint1: CGPoint(x: 379.5, y: 627.5), controlPoint2: CGPoint(x: 397, y: 652.5))
        aLUtoCMuxPath.addLine(to: CGPoint(x: 387, y: 652.5))
        aLUtoCMuxPath.addLine(to: CGPoint(x: 387, y: 662.5))
        aLUtoCMuxPath.addLine(to: CGPoint(x: 430, y: 662.5))
        aLUtoCMuxPath.addCurve(to: CGPoint(x: 430, y: 620), controlPoint1: CGPoint(x: 430, y: 656.17), controlPoint2: CGPoint(x: 430, y: 620))
        aLUtoCMuxPath.addLine(to: CGPoint(x: 445, y: 620))
        aLUtoCMuxPath.addLine(to: CGPoint(x: 445, y: 677.5))
        aLUtoCMuxPath.addLine(to: CGPoint(x: 372, y: 677.5))
        aLUtoCMuxPath.addLine(to: CGPoint(x: 372, y: 652.5))
        aLUtoCMuxPath.addLine(to: CGPoint(x: 362, y: 652.5))
        aLUtoCMuxPath.addLine(to: CGPoint(x: 379.5, y: 627.5))
        aLUtoCMuxPath.addLine(to: CGPoint(x: 379.5, y: 627.5))
        aLUtoCMuxPath.close()
        aLUtoCMuxColor.setFill()
        aLUtoCMuxPath.fill()
        UIColor.black.setStroke()
        aLUtoCMuxPath.lineWidth = 1
        aLUtoCMuxPath.stroke()


        //// CSMux Drawing
        let cSMuxPath = UIBezierPath()
        cSMuxPath.move(to: CGPoint(x: 690, y: 664.5))
        cSMuxPath.addLine(to: CGPoint(x: 690, y: 639.5))
        cSMuxPath.addLine(to: CGPoint(x: 632.17, y: 639.5))
        cSMuxPath.addLine(to: CGPoint(x: 647, y: 639.5))
        cSMuxPath.addLine(to: CGPoint(x: 632.17, y: 639.5))
        cSMuxPath.addLine(to: CGPoint(x: 589, y: 639.5))
        cSMuxPath.addLine(to: CGPoint(x: 589, y: 664.5))
        cSMuxPath.addLine(to: CGPoint(x: 632, y: 664.5))
        cSMuxPath.addLine(to: CGPoint(x: 647, y: 664.5))
        cSMuxPath.addLine(to: CGPoint(x: 690, y: 664.5))
        cSMuxPath.close()
        cSMuxColor.setFill()
        cSMuxPath.fill()
        UIColor.black.setStroke()
        cSMuxPath.lineWidth = 1
        cSMuxPath.stroke()


        //// BustoMDRMux 2 Drawing
        let bustoMDRMux2Path = UIBezierPath()
        bustoMDRMux2Path.move(to: CGPoint(x: 304, y: 651.75))
        bustoMDRMux2Path.addLine(to: CGPoint(x: 294, y: 651.75))
        bustoMDRMux2Path.addLine(to: CGPoint(x: 311.5, y: 626.75))
        bustoMDRMux2Path.addLine(to: CGPoint(x: 329, y: 651.75))
        bustoMDRMux2Path.addLine(to: CGPoint(x: 319, y: 651.75))
        bustoMDRMux2Path.addLine(to: CGPoint(x: 319, y: 831.75))
        bustoMDRMux2Path.addLine(to: CGPoint(x: 357, y: 831.75))
        bustoMDRMux2Path.addLine(to: CGPoint(x: 357, y: 750.27))
        bustoMDRMux2Path.addLine(to: CGPoint(x: 357, y: 922.88))
        bustoMDRMux2Path.addLine(to: CGPoint(x: 357, y: 846.75))
        bustoMDRMux2Path.addLine(to: CGPoint(x: 319, y: 846.75))
        bustoMDRMux2Path.addLine(to: CGPoint(x: 304, y: 846.75))
        bustoMDRMux2Path.addLine(to: CGPoint(x: 304, y: 651.75))
        bustoMDRMux2Path.close()
        bitstoCMuxColor.setFill()
        bustoMDRMux2Path.fill()
        UIColor.black.setStroke()
        bustoMDRMux2Path.lineWidth = 1
        bustoMDRMux2Path.stroke()


        //// SCkValue Drawing
        let sCkValuePath = UIBezierPath()
        sCkValuePath.move(to: CGPoint(x: 690, y: 715))
        sCkValuePath.addLine(to: CGPoint(x: 690, y: 690))
        sCkValuePath.addLine(to: CGPoint(x: 665, y: 690))
        sCkValuePath.addLine(to: CGPoint(x: 665, y: 715))
        sCkValuePath.addLine(to: CGPoint(x: 690, y: 715))
        sCkValuePath.close()
        bitsBoxColor.setFill()
        sCkValuePath.fill()
        UIColor.black.setStroke()
        sCkValuePath.lineWidth = 1
        sCkValuePath.stroke()


        //// CCkValue Drawing
        let cCkValuePath = UIBezierPath()
        cCkValuePath.move(to: CGPoint(x: 690, y: 750))
        cCkValuePath.addLine(to: CGPoint(x: 690, y: 725))
        cCkValuePath.addLine(to: CGPoint(x: 665, y: 725))
        cCkValuePath.addLine(to: CGPoint(x: 665, y: 750))
        cCkValuePath.addLine(to: CGPoint(x: 690, y: 750))
        cCkValuePath.close()
        bitsBoxColor.setFill()
        cCkValuePath.fill()
        UIColor.black.setStroke()
        cCkValuePath.lineWidth = 1
        cCkValuePath.stroke()


        //// VCkValue Drawing
        let vCkValuePath = UIBezierPath()
        vCkValuePath.move(to: CGPoint(x: 690, y: 785))
        vCkValuePath.addLine(to: CGPoint(x: 690, y: 760))
        vCkValuePath.addLine(to: CGPoint(x: 665, y: 760))
        vCkValuePath.addLine(to: CGPoint(x: 665, y: 785))
        vCkValuePath.addLine(to: CGPoint(x: 690, y: 785))
        vCkValuePath.close()
        bitsBoxColor.setFill()
        vCkValuePath.fill()
        UIColor.black.setStroke()
        vCkValuePath.lineWidth = 1
        vCkValuePath.stroke()


        //// ZCkValue Drawing
        let zCkValuePath = UIBezierPath()
        zCkValuePath.move(to: CGPoint(x: 690, y: 870))
        zCkValuePath.addLine(to: CGPoint(x: 690, y: 845))
        zCkValuePath.addLine(to: CGPoint(x: 665, y: 845))
        zCkValuePath.addLine(to: CGPoint(x: 665, y: 870))
        zCkValuePath.addLine(to: CGPoint(x: 690, y: 870))
        zCkValuePath.close()
        bitsBoxColor.setFill()
        zCkValuePath.fill()
        UIColor.black.setStroke()
        zCkValuePath.lineWidth = 1
        zCkValuePath.stroke()


        //// NCkValue Drawing
        let nCkValuePath = UIBezierPath()
        nCkValuePath.move(to: CGPoint(x: 690, y: 940))
        nCkValuePath.addLine(to: CGPoint(x: 690, y: 915))
        nCkValuePath.addLine(to: CGPoint(x: 665, y: 915))
        nCkValuePath.addLine(to: CGPoint(x: 665, y: 940))
        nCkValuePath.addLine(to: CGPoint(x: 690, y: 940))
        nCkValuePath.close()
        bitsBoxColor.setFill()
        nCkValuePath.fill()
        UIColor.black.setStroke()
        nCkValuePath.lineWidth = 1
        nCkValuePath.stroke()


        //// AndZ Drawing
        let andZPath = UIBezierPath()
        andZPath.move(to: CGPoint(x: 640, y: 870))
        andZPath.addLine(to: CGPoint(x: 640, y: 845))
        andZPath.addLine(to: CGPoint(x: 585, y: 845))
        andZPath.addLine(to: CGPoint(x: 585, y: 870))
        andZPath.addLine(to: CGPoint(x: 640, y: 870))
        andZPath.close()
        bitsBoxColor.setFill()
        andZPath.fill()
        UIColor.black.setStroke()
        andZPath.lineWidth = 1
        andZPath.stroke()


        //// Symbol 13 Drawing
        let symbol13Rect = CGRect(x: 55, y: 10, width: 123, height: 33)
        context.saveGState()
        context.clip(to: symbol13Rect)
        context.translateBy(x: symbol13Rect.minX, y: symbol13Rect.minY)

        CPU1ByteRenderer.drawALUbox(frame: CGRect(origin: .zero, size: symbol13Rect.size), resizing: .stretch)
        context.restoreGState()


        //// Group 30
        //// Text 5 Drawing
        let text5Rect = CGRect(x: 55, y: 94, width: 22, height: 15)
        let text5TextContent = "SP"
        let text5Style = NSMutableParagraphStyle()
        text5Style.alignment = .right
        let text5FontAttributes = [NSAttributedStringKey.font: UIFont.systemFont(ofSize: UIFont.systemFontSize), NSAttributedStringKey.foregroundColor: labelBlack, NSAttributedStringKey.paragraphStyle: text5Style] as [NSAttributedStringKey : Any]

        let text5TextHeight: CGFloat = text5TextContent.boundingRect(with: CGSize(width: text5Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: text5FontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: text5Rect)
        text5TextContent.draw(in: CGRect(x: text5Rect.minX, y: text5Rect.minY + (text5Rect.height - text5TextHeight) / 2, width: text5Rect.width, height: text5TextHeight), withAttributes: text5FontAttributes)
        context.restoreGState()


        //// Rectangle 4 Drawing
        let rectangle4Path = UIBezierPath(rect: CGRect(x: 86.87, y: 93, width: 45, height: 17))
        aLUvalgrey.setFill()
        rectangle4Path.fill()
        aLUstrokeblack.setStroke()
        rectangle4Path.lineWidth = 1
        rectangle4Path.stroke()
        
        
        "Hello".draw(in: CGRect(x: 86.87, y: 93, width: 45, height: 17), withAttributes: text5FontAttributes)


        //// Rectangle 5 Drawing
        let rectangle5Path = UIBezierPath(rect: CGRect(x: 131.87, y: 93, width: 45, height: 17))
        aLUvalgrey.setFill()
        rectangle5Path.fill()
        aLUstrokeblack.setStroke()
        rectangle5Path.lineWidth = 1
        rectangle5Path.stroke()


        //// Text 6 Drawing
        let text6Rect = CGRect(x: 86.87, y: 80, width: 16, height: 13)
        let text6TextContent = "4"
        let text6Style = NSMutableParagraphStyle()
        text6Style.alignment = .left
        let text6FontAttributes = [NSAttributedStringKey.font: UIFont.systemFont(ofSize: UIFont.smallSystemFontSize), NSAttributedStringKey.foregroundColor: labelBlack, NSAttributedStringKey.paragraphStyle: text6Style] as [NSAttributedStringKey : Any]

        let text6TextHeight: CGFloat = text6TextContent.boundingRect(with: CGSize(width: text6Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: text6FontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: text6Rect)
        text6TextContent.draw(in: CGRect(x: text6Rect.minX, y: text6Rect.minY + (text6Rect.height - text6TextHeight) / 2, width: text6Rect.width, height: text6TextHeight), withAttributes: text6FontAttributes)
        context.restoreGState()


        //// Text 7 Drawing
        let text7Rect = CGRect(x: 132, y: 80, width: 16, height: 13)
        let text7TextContent = "5"
        let text7Style = NSMutableParagraphStyle()
        text7Style.alignment = .left
        let text7FontAttributes = [NSAttributedStringKey.font: UIFont.systemFont(ofSize: UIFont.smallSystemFontSize), NSAttributedStringKey.foregroundColor: labelBlack, NSAttributedStringKey.paragraphStyle: text7Style] as [NSAttributedStringKey : Any]

        let text7TextHeight: CGFloat = text7TextContent.boundingRect(with: CGSize(width: text7Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: text7FontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: text7Rect)
        text7TextContent.draw(in: CGRect(x: text7Rect.minX, y: text7Rect.minY + (text7Rect.height - text7TextHeight) / 2, width: text7Rect.width, height: text7TextHeight), withAttributes: text7FontAttributes)
        context.restoreGState()




        //// Group 31
        //// Text 8 Drawing
        let text8Rect = CGRect(x: 55, y: 129, width: 22, height: 15)
        let text8TextContent = "PC"
        let text8Style = NSMutableParagraphStyle()
        text8Style.alignment = .right
        let text8FontAttributes = [NSAttributedStringKey.font: UIFont.systemFont(ofSize: UIFont.systemFontSize), NSAttributedStringKey.foregroundColor: labelBlack, NSAttributedStringKey.paragraphStyle: text8Style] as [NSAttributedStringKey : Any]

        let text8TextHeight: CGFloat = text8TextContent.boundingRect(with: CGSize(width: text8Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: text8FontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: text8Rect)
        text8TextContent.draw(in: CGRect(x: text8Rect.minX, y: text8Rect.minY + (text8Rect.height - text8TextHeight) / 2, width: text8Rect.width, height: text8TextHeight), withAttributes: text8FontAttributes)
        context.restoreGState()


        //// Rectangle 6 Drawing
        let rectangle6Path = UIBezierPath(rect: CGRect(x: 86.87, y: 128, width: 45, height: 17))
        aLUvalgrey.setFill()
        rectangle6Path.fill()
        aLUstrokeblack.setStroke()
        rectangle6Path.lineWidth = 1
        rectangle6Path.stroke()


        //// Rectangle 7 Drawing
        let rectangle7Path = UIBezierPath(rect: CGRect(x: 131.87, y: 128, width: 45, height: 17))
        aLUvalgrey.setFill()
        rectangle7Path.fill()
        aLUstrokeblack.setStroke()
        rectangle7Path.lineWidth = 1
        rectangle7Path.stroke()


        //// Text 9 Drawing
        let text9Rect = CGRect(x: 87, y: 115, width: 16, height: 13)
        let text9TextContent = "6"
        let text9Style = NSMutableParagraphStyle()
        text9Style.alignment = .left
        let text9FontAttributes = [NSAttributedStringKey.font: UIFont.systemFont(ofSize: UIFont.smallSystemFontSize), NSAttributedStringKey.foregroundColor: labelBlack, NSAttributedStringKey.paragraphStyle: text9Style] as [NSAttributedStringKey : Any]

        let text9TextHeight: CGFloat = text9TextContent.boundingRect(with: CGSize(width: text9Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: text9FontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: text9Rect)
        text9TextContent.draw(in: CGRect(x: text9Rect.minX, y: text9Rect.minY + (text9Rect.height - text9TextHeight) / 2, width: text9Rect.width, height: text9TextHeight), withAttributes: text9FontAttributes)
        context.restoreGState()


        //// Text 10 Drawing
        let text10Rect = CGRect(x: 132, y: 115, width: 16, height: 13)
        let text10TextContent = "7"
        let text10Style = NSMutableParagraphStyle()
        text10Style.alignment = .left
        let text10FontAttributes = [NSAttributedStringKey.font: UIFont.systemFont(ofSize: UIFont.smallSystemFontSize), NSAttributedStringKey.foregroundColor: labelBlack, NSAttributedStringKey.paragraphStyle: text10Style] as [NSAttributedStringKey : Any]

        let text10TextHeight: CGFloat = text10TextContent.boundingRect(with: CGSize(width: text10Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: text10FontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: text10Rect)
        text10TextContent.draw(in: CGRect(x: text10Rect.minX, y: text10Rect.minY + (text10Rect.height - text10TextHeight) / 2, width: text10Rect.width, height: text10TextHeight), withAttributes: text10FontAttributes)
        context.restoreGState()




        //// Group 29
        //// Text 2 Drawing
        let text2Rect = CGRect(x: 55, y: 59, width: 22, height: 15)
        let text2TextContent = "X"
        let text2Style = NSMutableParagraphStyle()
        text2Style.alignment = .right
        let text2FontAttributes = [NSAttributedStringKey.font: UIFont.systemFont(ofSize: UIFont.systemFontSize), NSAttributedStringKey.foregroundColor: labelBlack, NSAttributedStringKey.paragraphStyle: text2Style] as [NSAttributedStringKey : Any]

        let text2TextHeight: CGFloat = text2TextContent.boundingRect(with: CGSize(width: text2Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: text2FontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: text2Rect)
        text2TextContent.draw(in: CGRect(x: text2Rect.minX, y: text2Rect.minY + (text2Rect.height - text2TextHeight) / 2, width: text2Rect.width, height: text2TextHeight), withAttributes: text2FontAttributes)
        context.restoreGState()


        //// Rectangle 2 Drawing
        let rectangle2Path = UIBezierPath(rect: CGRect(x: 86.87, y: 58, width: 45, height: 17))
        aLUvalgrey.setFill()
        rectangle2Path.fill()
        aLUstrokeblack.setStroke()
        rectangle2Path.lineWidth = 1
        rectangle2Path.stroke()


        //// Rectangle 3 Drawing
        let rectangle3Path = UIBezierPath(rect: CGRect(x: 131.87, y: 58, width: 45, height: 17))
        aLUvalgrey.setFill()
        rectangle3Path.fill()
        aLUstrokeblack.setStroke()
        rectangle3Path.lineWidth = 1
        rectangle3Path.stroke()


        //// Text 3 Drawing
        let text3Rect = CGRect(x: 86.87, y: 45, width: 16, height: 13)
        let text3TextContent = "2"
        let text3Style = NSMutableParagraphStyle()
        text3Style.alignment = .left
        let text3FontAttributes = [NSAttributedStringKey.font: UIFont.systemFont(ofSize: UIFont.smallSystemFontSize), NSAttributedStringKey.foregroundColor: labelBlack, NSAttributedStringKey.paragraphStyle: text3Style] as [NSAttributedStringKey : Any]

        let text3TextHeight: CGFloat = text3TextContent.boundingRect(with: CGSize(width: text3Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: text3FontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: text3Rect)
        text3TextContent.draw(in: CGRect(x: text3Rect.minX, y: text3Rect.minY + (text3Rect.height - text3TextHeight) / 2, width: text3Rect.width, height: text3TextHeight), withAttributes: text3FontAttributes)
        context.restoreGState()


        //// Text 4 Drawing
        let text4Rect = CGRect(x: 131.87, y: 45, width: 16, height: 13)
        let text4TextContent = "3"
        let text4Style = NSMutableParagraphStyle()
        text4Style.alignment = .left
        let text4FontAttributes = [NSAttributedStringKey.font: UIFont.systemFont(ofSize: UIFont.smallSystemFontSize), NSAttributedStringKey.foregroundColor: labelBlack, NSAttributedStringKey.paragraphStyle: text4Style] as [NSAttributedStringKey : Any]

        let text4TextHeight: CGFloat = text4TextContent.boundingRect(with: CGSize(width: text4Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: text4FontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: text4Rect)
        text4TextContent.draw(in: CGRect(x: text4Rect.minX, y: text4Rect.minY + (text4Rect.height - text4TextHeight) / 2, width: text4Rect.width, height: text4TextHeight), withAttributes: text4FontAttributes)
        context.restoreGState()




        //// Group 42
        //// Text 41 Drawing
        let text41Rect = CGRect(x: 195, y: 24, width: 22, height: 15)
        let text41TextContent = "IR"
        let text41Style = NSMutableParagraphStyle()
        text41Style.alignment = .right
        let text41FontAttributes = [NSAttributedStringKey.font: UIFont.systemFont(ofSize: UIFont.systemFontSize), NSAttributedStringKey.foregroundColor: labelBlack, NSAttributedStringKey.paragraphStyle: text41Style] as [NSAttributedStringKey : Any]

        let text41TextHeight: CGFloat = text41TextContent.boundingRect(with: CGSize(width: text41Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: text41FontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: text41Rect)
        text41TextContent.draw(in: CGRect(x: text41Rect.minX, y: text41Rect.minY + (text41Rect.height - text41TextHeight) / 2, width: text41Rect.width, height: text41TextHeight), withAttributes: text41FontAttributes)
        context.restoreGState()


        //// Rectangle 28 Drawing
        let rectangle28Path = UIBezierPath(rect: CGRect(x: 226.87, y: 23, width: 45, height: 17))
        aLUvalgrey.setFill()
        rectangle28Path.fill()
        aLUstrokeblack.setStroke()
        rectangle28Path.lineWidth = 1
        rectangle28Path.stroke()


        //// Text 42 Drawing
        let text42Rect = CGRect(x: 227, y: 10, width: 16, height: 13)
        let text42TextContent = "8"
        let text42Style = NSMutableParagraphStyle()
        text42Style.alignment = .left
        let text42FontAttributes = [NSAttributedStringKey.font: UIFont.systemFont(ofSize: UIFont.smallSystemFontSize), NSAttributedStringKey.foregroundColor: labelBlack, NSAttributedStringKey.paragraphStyle: text42Style] as [NSAttributedStringKey : Any]

        let text42TextHeight: CGFloat = text42TextContent.boundingRect(with: CGSize(width: text42Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: text42FontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: text42Rect)
        text42TextContent.draw(in: CGRect(x: text42Rect.minX, y: text42Rect.minY + (text42Rect.height - text42TextHeight) / 2, width: text42Rect.width, height: text42TextHeight), withAttributes: text42FontAttributes)
        context.restoreGState()




        //// Group 32
        //// Text 11 Drawing
        let text11Rect = CGRect(x: 195, y: 94, width: 22, height: 15)
        let text11TextContent = "T1"
        let text11Style = NSMutableParagraphStyle()
        text11Style.alignment = .right
        let text11FontAttributes = [NSAttributedStringKey.font: UIFont.systemFont(ofSize: UIFont.systemFontSize), NSAttributedStringKey.foregroundColor: labelBlack, NSAttributedStringKey.paragraphStyle: text11Style] as [NSAttributedStringKey : Any]

        let text11TextHeight: CGFloat = text11TextContent.boundingRect(with: CGSize(width: text11Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: text11FontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: text11Rect)
        text11TextContent.draw(in: CGRect(x: text11Rect.minX, y: text11Rect.minY + (text11Rect.height - text11TextHeight) / 2, width: text11Rect.width, height: text11TextHeight), withAttributes: text11FontAttributes)
        context.restoreGState()


        //// Rectangle 8 Drawing
        let rectangle8Path = UIBezierPath(rect: CGRect(x: 226.87, y: 93, width: 45, height: 17))
        aLUvalgrey.setFill()
        rectangle8Path.fill()
        aLUstrokeblack.setStroke()
        rectangle8Path.lineWidth = 1
        rectangle8Path.stroke()


        //// Text 12 Drawing
        let text12Rect = CGRect(x: 227, y: 80, width: 16, height: 13)
        let text12TextContent = "11"
        let text12Style = NSMutableParagraphStyle()
        text12Style.alignment = .left
        let text12FontAttributes = [NSAttributedStringKey.font: UIFont.systemFont(ofSize: UIFont.smallSystemFontSize), NSAttributedStringKey.foregroundColor: labelBlack, NSAttributedStringKey.paragraphStyle: text12Style] as [NSAttributedStringKey : Any]

        let text12TextHeight: CGFloat = text12TextContent.boundingRect(with: CGSize(width: text12Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: text12FontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: text12Rect)
        text12TextContent.draw(in: CGRect(x: text12Rect.minX, y: text12Rect.minY + (text12Rect.height - text12TextHeight) / 2, width: text12Rect.width, height: text12TextHeight), withAttributes: text12FontAttributes)
        context.restoreGState()




        //// Group 33
        //// Text 14 Drawing
        let text14Rect = CGRect(x: 195, y: 129, width: 22, height: 15)
        let text14TextContent = "T2"
        let text14Style = NSMutableParagraphStyle()
        text14Style.alignment = .right
        let text14FontAttributes = [NSAttributedStringKey.font: UIFont.systemFont(ofSize: UIFont.systemFontSize), NSAttributedStringKey.foregroundColor: labelBlack, NSAttributedStringKey.paragraphStyle: text14Style] as [NSAttributedStringKey : Any]

        let text14TextHeight: CGFloat = text14TextContent.boundingRect(with: CGSize(width: text14Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: text14FontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: text14Rect)
        text14TextContent.draw(in: CGRect(x: text14Rect.minX, y: text14Rect.minY + (text14Rect.height - text14TextHeight) / 2, width: text14Rect.width, height: text14TextHeight), withAttributes: text14FontAttributes)
        context.restoreGState()


        //// Rectangle 10 Drawing
        let rectangle10Path = UIBezierPath(rect: CGRect(x: 226.87, y: 128, width: 45, height: 17))
        aLUvalgrey.setFill()
        rectangle10Path.fill()
        aLUstrokeblack.setStroke()
        rectangle10Path.lineWidth = 1
        rectangle10Path.stroke()


        //// Rectangle 11 Drawing
        let rectangle11Path = UIBezierPath(rect: CGRect(x: 271.87, y: 128, width: 45, height: 17))
        aLUvalgrey.setFill()
        rectangle11Path.fill()
        aLUstrokeblack.setStroke()
        rectangle11Path.lineWidth = 1
        rectangle11Path.stroke()


        //// Text 15 Drawing
        let text15Rect = CGRect(x: 227, y: 115, width: 16, height: 13)
        let text15TextContent = "12"
        let text15Style = NSMutableParagraphStyle()
        text15Style.alignment = .left
        let text15FontAttributes = [NSAttributedStringKey.font: UIFont.systemFont(ofSize: UIFont.smallSystemFontSize), NSAttributedStringKey.foregroundColor: labelBlack, NSAttributedStringKey.paragraphStyle: text15Style] as [NSAttributedStringKey : Any]

        let text15TextHeight: CGFloat = text15TextContent.boundingRect(with: CGSize(width: text15Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: text15FontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: text15Rect)
        text15TextContent.draw(in: CGRect(x: text15Rect.minX, y: text15Rect.minY + (text15Rect.height - text15TextHeight) / 2, width: text15Rect.width, height: text15TextHeight), withAttributes: text15FontAttributes)
        context.restoreGState()


        //// Text 16 Drawing
        let text16Rect = CGRect(x: 272, y: 115, width: 16, height: 13)
        let text16TextContent = "13"
        let text16Style = NSMutableParagraphStyle()
        text16Style.alignment = .left
        let text16FontAttributes = [NSAttributedStringKey.font: UIFont.systemFont(ofSize: UIFont.smallSystemFontSize), NSAttributedStringKey.foregroundColor: labelBlack, NSAttributedStringKey.paragraphStyle: text16Style] as [NSAttributedStringKey : Any]

        let text16TextHeight: CGFloat = text16TextContent.boundingRect(with: CGSize(width: text16Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: text16FontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: text16Rect)
        text16TextContent.draw(in: CGRect(x: text16Rect.minX, y: text16Rect.minY + (text16Rect.height - text16TextHeight) / 2, width: text16Rect.width, height: text16TextHeight), withAttributes: text16FontAttributes)
        context.restoreGState()




        //// Group 34
        //// Rectangle 12 Drawing
        let rectangle12Path = UIBezierPath(rect: CGRect(x: 226.87, y: 58, width: 45, height: 17))
        aLUvalgrey.setFill()
        rectangle12Path.fill()
        aLUstrokeblack.setStroke()
        rectangle12Path.lineWidth = 1
        rectangle12Path.stroke()


        //// Rectangle 13 Drawing
        let rectangle13Path = UIBezierPath(rect: CGRect(x: 271.87, y: 58, width: 45, height: 17))
        aLUvalgrey.setFill()
        rectangle13Path.fill()
        aLUstrokeblack.setStroke()
        rectangle13Path.lineWidth = 1
        rectangle13Path.stroke()


        //// Text 18 Drawing
        let text18Rect = CGRect(x: 227, y: 45, width: 16, height: 13)
        let text18TextContent = "9"
        let text18Style = NSMutableParagraphStyle()
        text18Style.alignment = .left
        let text18FontAttributes = [NSAttributedStringKey.font: UIFont.systemFont(ofSize: UIFont.smallSystemFontSize), NSAttributedStringKey.foregroundColor: labelBlack, NSAttributedStringKey.paragraphStyle: text18Style] as [NSAttributedStringKey : Any]

        let text18TextHeight: CGFloat = text18TextContent.boundingRect(with: CGSize(width: text18Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: text18FontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: text18Rect)
        text18TextContent.draw(in: CGRect(x: text18Rect.minX, y: text18Rect.minY + (text18Rect.height - text18TextHeight) / 2, width: text18Rect.width, height: text18TextHeight), withAttributes: text18FontAttributes)
        context.restoreGState()


        //// Text 19 Drawing
        let text19Rect = CGRect(x: 272, y: 45, width: 16, height: 13)
        let text19TextContent = "10"
        let text19Style = NSMutableParagraphStyle()
        text19Style.alignment = .left
        let text19FontAttributes = [NSAttributedStringKey.font: UIFont.systemFont(ofSize: UIFont.smallSystemFontSize), NSAttributedStringKey.foregroundColor: labelBlack, NSAttributedStringKey.paragraphStyle: text19Style] as [NSAttributedStringKey : Any]

        let text19TextHeight: CGFloat = text19TextContent.boundingRect(with: CGSize(width: text19Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: text19FontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: text19Rect)
        text19TextContent.draw(in: CGRect(x: text19Rect.minX, y: text19Rect.minY + (text19Rect.height - text19TextHeight) / 2, width: text19Rect.width, height: text19TextHeight), withAttributes: text19FontAttributes)
        context.restoreGState()




        //// Group 43
        //// Text 17 Drawing
        let text17Rect = CGRect(x: 335, y: 24, width: 22, height: 15)
        let text17TextContent = "T3"
        let text17Style = NSMutableParagraphStyle()
        text17Style.alignment = .right
        let text17FontAttributes = [NSAttributedStringKey.font: UIFont.systemFont(ofSize: UIFont.systemFontSize), NSAttributedStringKey.foregroundColor: labelBlack, NSAttributedStringKey.paragraphStyle: text17Style] as [NSAttributedStringKey : Any]

        let text17TextHeight: CGFloat = text17TextContent.boundingRect(with: CGSize(width: text17Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: text17FontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: text17Rect)
        text17TextContent.draw(in: CGRect(x: text17Rect.minX, y: text17Rect.minY + (text17Rect.height - text17TextHeight) / 2, width: text17Rect.width, height: text17TextHeight), withAttributes: text17FontAttributes)
        context.restoreGState()


        //// Rectangle 29 Drawing
        let rectangle29Path = UIBezierPath(rect: CGRect(x: 366.87, y: 23, width: 45, height: 17))
        aLUvalgrey.setFill()
        rectangle29Path.fill()
        aLUstrokeblack.setStroke()
        rectangle29Path.lineWidth = 1
        rectangle29Path.stroke()


        //// Rectangle 30 Drawing
        let rectangle30Path = UIBezierPath(rect: CGRect(x: 411.87, y: 23, width: 45, height: 17))
        aLUvalgrey.setFill()
        rectangle30Path.fill()
        aLUstrokeblack.setStroke()
        rectangle30Path.lineWidth = 1
        rectangle30Path.stroke()


        //// Text 43 Drawing
        let text43Rect = CGRect(x: 367, y: 10, width: 16, height: 13)
        let text43TextContent = "14"
        let text43Style = NSMutableParagraphStyle()
        text43Style.alignment = .left
        let text43FontAttributes = [NSAttributedStringKey.font: UIFont.systemFont(ofSize: UIFont.smallSystemFontSize), NSAttributedStringKey.foregroundColor: labelBlack, NSAttributedStringKey.paragraphStyle: text43Style] as [NSAttributedStringKey : Any]

        let text43TextHeight: CGFloat = text43TextContent.boundingRect(with: CGSize(width: text43Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: text43FontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: text43Rect)
        text43TextContent.draw(in: CGRect(x: text43Rect.minX, y: text43Rect.minY + (text43Rect.height - text43TextHeight) / 2, width: text43Rect.width, height: text43TextHeight), withAttributes: text43FontAttributes)
        context.restoreGState()


        //// Text 44 Drawing
        let text44Rect = CGRect(x: 412, y: 10, width: 16, height: 13)
        let text44TextContent = "15"
        let text44Style = NSMutableParagraphStyle()
        text44Style.alignment = .left
        let text44FontAttributes = [NSAttributedStringKey.font: UIFont.systemFont(ofSize: UIFont.smallSystemFontSize), NSAttributedStringKey.foregroundColor: labelBlack, NSAttributedStringKey.paragraphStyle: text44Style] as [NSAttributedStringKey : Any]

        let text44TextHeight: CGFloat = text44TextContent.boundingRect(with: CGSize(width: text44Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: text44FontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: text44Rect)
        text44TextContent.draw(in: CGRect(x: text44Rect.minX, y: text44Rect.minY + (text44Rect.height - text44TextHeight) / 2, width: text44Rect.width, height: text44TextHeight), withAttributes: text44FontAttributes)
        context.restoreGState()




        //// Group 35
        //// Text 20 Drawing
        let text20Rect = CGRect(x: 335, y: 94, width: 22, height: 15)
        let text20TextContent = "T5"
        let text20Style = NSMutableParagraphStyle()
        text20Style.alignment = .right
        let text20FontAttributes = [NSAttributedStringKey.font: UIFont.systemFont(ofSize: UIFont.systemFontSize), NSAttributedStringKey.foregroundColor: labelBlack, NSAttributedStringKey.paragraphStyle: text20Style] as [NSAttributedStringKey : Any]

        let text20TextHeight: CGFloat = text20TextContent.boundingRect(with: CGSize(width: text20Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: text20FontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: text20Rect)
        text20TextContent.draw(in: CGRect(x: text20Rect.minX, y: text20Rect.minY + (text20Rect.height - text20TextHeight) / 2, width: text20Rect.width, height: text20TextHeight), withAttributes: text20FontAttributes)
        context.restoreGState()


        //// Rectangle 14 Drawing
        let rectangle14Path = UIBezierPath(rect: CGRect(x: 366.87, y: 93, width: 45, height: 17))
        aLUvalgrey.setFill()
        rectangle14Path.fill()
        aLUstrokeblack.setStroke()
        rectangle14Path.lineWidth = 1
        rectangle14Path.stroke()


        //// Rectangle 15 Drawing
        let rectangle15Path = UIBezierPath(rect: CGRect(x: 411.87, y: 93, width: 45, height: 17))
        aLUvalgrey.setFill()
        rectangle15Path.fill()
        aLUstrokeblack.setStroke()
        rectangle15Path.lineWidth = 1
        rectangle15Path.stroke()


        //// Text 21 Drawing
        let text21Rect = CGRect(x: 367, y: 80, width: 16, height: 13)
        let text21TextContent = "18"
        let text21Style = NSMutableParagraphStyle()
        text21Style.alignment = .left
        let text21FontAttributes = [NSAttributedStringKey.font: UIFont.systemFont(ofSize: UIFont.smallSystemFontSize), NSAttributedStringKey.foregroundColor: labelBlack, NSAttributedStringKey.paragraphStyle: text21Style] as [NSAttributedStringKey : Any]

        let text21TextHeight: CGFloat = text21TextContent.boundingRect(with: CGSize(width: text21Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: text21FontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: text21Rect)
        text21TextContent.draw(in: CGRect(x: text21Rect.minX, y: text21Rect.minY + (text21Rect.height - text21TextHeight) / 2, width: text21Rect.width, height: text21TextHeight), withAttributes: text21FontAttributes)
        context.restoreGState()


        //// Text 22 Drawing
        let text22Rect = CGRect(x: 412, y: 80, width: 16, height: 13)
        let text22TextContent = "19"
        let text22Style = NSMutableParagraphStyle()
        text22Style.alignment = .left
        let text22FontAttributes = [NSAttributedStringKey.font: UIFont.systemFont(ofSize: UIFont.smallSystemFontSize), NSAttributedStringKey.foregroundColor: labelBlack, NSAttributedStringKey.paragraphStyle: text22Style] as [NSAttributedStringKey : Any]

        let text22TextHeight: CGFloat = text22TextContent.boundingRect(with: CGSize(width: text22Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: text22FontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: text22Rect)
        text22TextContent.draw(in: CGRect(x: text22Rect.minX, y: text22Rect.minY + (text22Rect.height - text22TextHeight) / 2, width: text22Rect.width, height: text22TextHeight), withAttributes: text22FontAttributes)
        context.restoreGState()




        //// Group 36
        //// Text 23 Drawing
        let text23Rect = CGRect(x: 335, y: 129, width: 22, height: 15)
        let text23TextContent = "T6"
        let text23Style = NSMutableParagraphStyle()
        text23Style.alignment = .right
        let text23FontAttributes = [NSAttributedStringKey.font: UIFont.systemFont(ofSize: UIFont.systemFontSize), NSAttributedStringKey.foregroundColor: labelBlack, NSAttributedStringKey.paragraphStyle: text23Style] as [NSAttributedStringKey : Any]

        let text23TextHeight: CGFloat = text23TextContent.boundingRect(with: CGSize(width: text23Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: text23FontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: text23Rect)
        text23TextContent.draw(in: CGRect(x: text23Rect.minX, y: text23Rect.minY + (text23Rect.height - text23TextHeight) / 2, width: text23Rect.width, height: text23TextHeight), withAttributes: text23FontAttributes)
        context.restoreGState()


        //// Rectangle 16 Drawing
        let rectangle16Path = UIBezierPath(rect: CGRect(x: 366.87, y: 128, width: 45, height: 17))
        aLUvalgrey.setFill()
        rectangle16Path.fill()
        aLUstrokeblack.setStroke()
        rectangle16Path.lineWidth = 1
        rectangle16Path.stroke()


        //// Rectangle 17 Drawing
        let rectangle17Path = UIBezierPath(rect: CGRect(x: 411.87, y: 128, width: 45, height: 17))
        aLUvalgrey.setFill()
        rectangle17Path.fill()
        aLUstrokeblack.setStroke()
        rectangle17Path.lineWidth = 1
        rectangle17Path.stroke()


        //// Text 24 Drawing
        let text24Rect = CGRect(x: 367, y: 115, width: 16, height: 13)
        let text24TextContent = "20"
        let text24Style = NSMutableParagraphStyle()
        text24Style.alignment = .left
        let text24FontAttributes = [NSAttributedStringKey.font: UIFont.systemFont(ofSize: UIFont.smallSystemFontSize), NSAttributedStringKey.foregroundColor: labelBlack, NSAttributedStringKey.paragraphStyle: text24Style] as [NSAttributedStringKey : Any]

        let text24TextHeight: CGFloat = text24TextContent.boundingRect(with: CGSize(width: text24Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: text24FontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: text24Rect)
        text24TextContent.draw(in: CGRect(x: text24Rect.minX, y: text24Rect.minY + (text24Rect.height - text24TextHeight) / 2, width: text24Rect.width, height: text24TextHeight), withAttributes: text24FontAttributes)
        context.restoreGState()


        //// Text 25 Drawing
        let text25Rect = CGRect(x: 412, y: 115, width: 16, height: 13)
        let text25TextContent = "21"
        let text25Style = NSMutableParagraphStyle()
        text25Style.alignment = .left
        let text25FontAttributes = [NSAttributedStringKey.font: UIFont.systemFont(ofSize: UIFont.smallSystemFontSize), NSAttributedStringKey.foregroundColor: labelBlack, NSAttributedStringKey.paragraphStyle: text25Style] as [NSAttributedStringKey : Any]

        let text25TextHeight: CGFloat = text25TextContent.boundingRect(with: CGSize(width: text25Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: text25FontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: text25Rect)
        text25TextContent.draw(in: CGRect(x: text25Rect.minX, y: text25Rect.minY + (text25Rect.height - text25TextHeight) / 2, width: text25Rect.width, height: text25TextHeight), withAttributes: text25FontAttributes)
        context.restoreGState()




        //// Group 37
        //// Text 26 Drawing
        let text26Rect = CGRect(x: 335, y: 59, width: 22, height: 15)
        let text26TextContent = "T4"
        let text26Style = NSMutableParagraphStyle()
        text26Style.alignment = .right
        let text26FontAttributes = [NSAttributedStringKey.font: UIFont.systemFont(ofSize: UIFont.systemFontSize), NSAttributedStringKey.foregroundColor: labelBlack, NSAttributedStringKey.paragraphStyle: text26Style] as [NSAttributedStringKey : Any]

        let text26TextHeight: CGFloat = text26TextContent.boundingRect(with: CGSize(width: text26Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: text26FontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: text26Rect)
        text26TextContent.draw(in: CGRect(x: text26Rect.minX, y: text26Rect.minY + (text26Rect.height - text26TextHeight) / 2, width: text26Rect.width, height: text26TextHeight), withAttributes: text26FontAttributes)
        context.restoreGState()


        //// Rectangle 18 Drawing
        let rectangle18Path = UIBezierPath(rect: CGRect(x: 366.87, y: 58, width: 45, height: 17))
        aLUvalgrey.setFill()
        rectangle18Path.fill()
        aLUstrokeblack.setStroke()
        rectangle18Path.lineWidth = 1
        rectangle18Path.stroke()


        //// Rectangle 19 Drawing
        let rectangle19Path = UIBezierPath(rect: CGRect(x: 411.87, y: 58, width: 45, height: 17))
        aLUvalgrey.setFill()
        rectangle19Path.fill()
        aLUstrokeblack.setStroke()
        rectangle19Path.lineWidth = 1
        rectangle19Path.stroke()


        //// Text 27 Drawing
        let text27Rect = CGRect(x: 367, y: 45, width: 16, height: 13)
        let text27TextContent = "16"
        let text27Style = NSMutableParagraphStyle()
        text27Style.alignment = .left
        let text27FontAttributes = [NSAttributedStringKey.font: UIFont.systemFont(ofSize: UIFont.smallSystemFontSize), NSAttributedStringKey.foregroundColor: labelBlack, NSAttributedStringKey.paragraphStyle: text27Style] as [NSAttributedStringKey : Any]

        let text27TextHeight: CGFloat = text27TextContent.boundingRect(with: CGSize(width: text27Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: text27FontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: text27Rect)
        text27TextContent.draw(in: CGRect(x: text27Rect.minX, y: text27Rect.minY + (text27Rect.height - text27TextHeight) / 2, width: text27Rect.width, height: text27TextHeight), withAttributes: text27FontAttributes)
        context.restoreGState()


        //// Text 28 Drawing
        let text28Rect = CGRect(x: 412, y: 45, width: 16, height: 13)
        let text28TextContent = "17"
        let text28Style = NSMutableParagraphStyle()
        text28Style.alignment = .left
        let text28FontAttributes = [NSAttributedStringKey.font: UIFont.systemFont(ofSize: UIFont.smallSystemFontSize), NSAttributedStringKey.foregroundColor: labelBlack, NSAttributedStringKey.paragraphStyle: text28Style] as [NSAttributedStringKey : Any]

        let text28TextHeight: CGFloat = text28TextContent.boundingRect(with: CGSize(width: text28Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: text28FontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: text28Rect)
        text28TextContent.draw(in: CGRect(x: text28Rect.minX, y: text28Rect.minY + (text28Rect.height - text28TextHeight) / 2, width: text28Rect.width, height: text28TextHeight), withAttributes: text28FontAttributes)
        context.restoreGState()




        //// Group 44
        //// Text 45 Drawing
        let text45Rect = CGRect(x: 475, y: 24, width: 22, height: 15)
        let text45TextContent = "M1"
        let text45Style = NSMutableParagraphStyle()
        text45Style.alignment = .right
        let text45FontAttributes = [NSAttributedStringKey.font: UIFont.systemFont(ofSize: UIFont.systemFontSize), NSAttributedStringKey.foregroundColor: labelBlack, NSAttributedStringKey.paragraphStyle: text45Style] as [NSAttributedStringKey : Any]

        let text45TextHeight: CGFloat = text45TextContent.boundingRect(with: CGSize(width: text45Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: text45FontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: text45Rect)
        text45TextContent.draw(in: CGRect(x: text45Rect.minX, y: text45Rect.minY + (text45Rect.height - text45TextHeight) / 2, width: text45Rect.width, height: text45TextHeight), withAttributes: text45FontAttributes)
        context.restoreGState()


        //// Rectangle 31 Drawing
        let rectangle31Path = UIBezierPath(rect: CGRect(x: 506.87, y: 23, width: 45, height: 17))
        mWhite.setFill()
        rectangle31Path.fill()
        aLUstrokeblack.setStroke()
        rectangle31Path.lineWidth = 1
        rectangle31Path.stroke()


        //// Rectangle 32 Drawing
        let rectangle32Path = UIBezierPath(rect: CGRect(x: 551.87, y: 23, width: 45, height: 17))
        mWhite.setFill()
        rectangle32Path.fill()
        aLUstrokeblack.setStroke()
        rectangle32Path.lineWidth = 1
        rectangle32Path.stroke()


        //// Text 46 Drawing
        let text46Rect = CGRect(x: 507, y: 10, width: 16, height: 13)
        let text46TextContent = "22"
        let text46Style = NSMutableParagraphStyle()
        text46Style.alignment = .left
        let text46FontAttributes = [NSAttributedStringKey.font: UIFont.systemFont(ofSize: UIFont.smallSystemFontSize), NSAttributedStringKey.foregroundColor: labelBlack, NSAttributedStringKey.paragraphStyle: text46Style] as [NSAttributedStringKey : Any]

        let text46TextHeight: CGFloat = text46TextContent.boundingRect(with: CGSize(width: text46Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: text46FontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: text46Rect)
        text46TextContent.draw(in: CGRect(x: text46Rect.minX, y: text46Rect.minY + (text46Rect.height - text46TextHeight) / 2, width: text46Rect.width, height: text46TextHeight), withAttributes: text46FontAttributes)
        context.restoreGState()


        //// Text 47 Drawing
        let text47Rect = CGRect(x: 552, y: 10, width: 16, height: 13)
        let text47TextContent = "23"
        let text47Style = NSMutableParagraphStyle()
        text47Style.alignment = .left
        let text47FontAttributes = [NSAttributedStringKey.font: UIFont.systemFont(ofSize: UIFont.smallSystemFontSize), NSAttributedStringKey.foregroundColor: labelBlack, NSAttributedStringKey.paragraphStyle: text47Style] as [NSAttributedStringKey : Any]

        let text47TextHeight: CGFloat = text47TextContent.boundingRect(with: CGSize(width: text47Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: text47FontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: text47Rect)
        text47TextContent.draw(in: CGRect(x: text47Rect.minX, y: text47Rect.minY + (text47Rect.height - text47TextHeight) / 2, width: text47Rect.width, height: text47TextHeight), withAttributes: text47FontAttributes)
        context.restoreGState()


        //// Text 13 Drawing
        let text13Rect = CGRect(x: 512, y: 25, width: 39.87, height: 13)
        let text13TextContent = "0x00"
        let text13Style = NSMutableParagraphStyle()
        text13Style.alignment = .left
        let text13FontAttributes = [NSAttributedStringKey.font: UIFont.systemFont(ofSize: UIFont.smallSystemFontSize), NSAttributedStringKey.foregroundColor: labelBlack, NSAttributedStringKey.paragraphStyle: text13Style] as [NSAttributedStringKey : Any]

        let text13TextHeight: CGFloat = text13TextContent.boundingRect(with: CGSize(width: text13Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: text13FontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: text13Rect)
        text13TextContent.draw(in: CGRect(x: text13Rect.minX, y: text13Rect.minY + (text13Rect.height - text13TextHeight) / 2, width: text13Rect.width, height: text13TextHeight), withAttributes: text13FontAttributes)
        context.restoreGState()


        //// Text 48 Drawing
        let text48Rect = CGRect(x: 557, y: 25, width: 39.87, height: 13)
        let text48TextContent = "0x01"
        let text48Style = NSMutableParagraphStyle()
        text48Style.alignment = .left
        let text48FontAttributes = [NSAttributedStringKey.font: UIFont.systemFont(ofSize: UIFont.smallSystemFontSize), NSAttributedStringKey.foregroundColor: labelBlack, NSAttributedStringKey.paragraphStyle: text48Style] as [NSAttributedStringKey : Any]

        let text48TextHeight: CGFloat = text48TextContent.boundingRect(with: CGSize(width: text48Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: text48FontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: text48Rect)
        text48TextContent.draw(in: CGRect(x: text48Rect.minX, y: text48Rect.minY + (text48Rect.height - text48TextHeight) / 2, width: text48Rect.width, height: text48TextHeight), withAttributes: text48FontAttributes)
        context.restoreGState()




        //// Group 38
        //// Text 29 Drawing
        let text29Rect = CGRect(x: 475, y: 59, width: 22, height: 15)
        let text29TextContent = "M2"
        let text29Style = NSMutableParagraphStyle()
        text29Style.alignment = .right
        let text29FontAttributes = [NSAttributedStringKey.font: UIFont.systemFont(ofSize: UIFont.systemFontSize), NSAttributedStringKey.foregroundColor: labelBlack, NSAttributedStringKey.paragraphStyle: text29Style] as [NSAttributedStringKey : Any]

        let text29TextHeight: CGFloat = text29TextContent.boundingRect(with: CGSize(width: text29Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: text29FontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: text29Rect)
        text29TextContent.draw(in: CGRect(x: text29Rect.minX, y: text29Rect.minY + (text29Rect.height - text29TextHeight) / 2, width: text29Rect.width, height: text29TextHeight), withAttributes: text29FontAttributes)
        context.restoreGState()


        //// Rectangle 9 Drawing
        let rectangle9Path = UIBezierPath(rect: CGRect(x: 506.87, y: 58, width: 45, height: 17))
        mWhite.setFill()
        rectangle9Path.fill()
        aLUstrokeblack.setStroke()
        rectangle9Path.lineWidth = 1
        rectangle9Path.stroke()


        //// Rectangle 20 Drawing
        let rectangle20Path = UIBezierPath(rect: CGRect(x: 551.87, y: 58, width: 45, height: 17))
        mWhite.setFill()
        rectangle20Path.fill()
        aLUstrokeblack.setStroke()
        rectangle20Path.lineWidth = 1
        rectangle20Path.stroke()


        //// Text 30 Drawing
        let text30Rect = CGRect(x: 507, y: 45, width: 16, height: 13)
        let text30TextContent = "24"
        let text30Style = NSMutableParagraphStyle()
        text30Style.alignment = .left
        let text30FontAttributes = [NSAttributedStringKey.font: UIFont.systemFont(ofSize: UIFont.smallSystemFontSize), NSAttributedStringKey.foregroundColor: labelBlack, NSAttributedStringKey.paragraphStyle: text30Style] as [NSAttributedStringKey : Any]

        let text30TextHeight: CGFloat = text30TextContent.boundingRect(with: CGSize(width: text30Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: text30FontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: text30Rect)
        text30TextContent.draw(in: CGRect(x: text30Rect.minX, y: text30Rect.minY + (text30Rect.height - text30TextHeight) / 2, width: text30Rect.width, height: text30TextHeight), withAttributes: text30FontAttributes)
        context.restoreGState()


        //// Text 31 Drawing
        let text31Rect = CGRect(x: 552, y: 45, width: 16, height: 13)
        let text31TextContent = "25"
        let text31Style = NSMutableParagraphStyle()
        text31Style.alignment = .left
        let text31FontAttributes = [NSAttributedStringKey.font: UIFont.systemFont(ofSize: UIFont.smallSystemFontSize), NSAttributedStringKey.foregroundColor: labelBlack, NSAttributedStringKey.paragraphStyle: text31Style] as [NSAttributedStringKey : Any]

        let text31TextHeight: CGFloat = text31TextContent.boundingRect(with: CGSize(width: text31Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: text31FontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: text31Rect)
        text31TextContent.draw(in: CGRect(x: text31Rect.minX, y: text31Rect.minY + (text31Rect.height - text31TextHeight) / 2, width: text31Rect.width, height: text31TextHeight), withAttributes: text31FontAttributes)
        context.restoreGState()


        //// Text 32 Drawing
        let text32Rect = CGRect(x: 512, y: 60, width: 39.87, height: 13)
        let text32TextContent = "0x02"
        let text32Style = NSMutableParagraphStyle()
        text32Style.alignment = .left
        let text32FontAttributes = [NSAttributedStringKey.font: UIFont.systemFont(ofSize: UIFont.smallSystemFontSize), NSAttributedStringKey.foregroundColor: labelBlack, NSAttributedStringKey.paragraphStyle: text32Style] as [NSAttributedStringKey : Any]

        let text32TextHeight: CGFloat = text32TextContent.boundingRect(with: CGSize(width: text32Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: text32FontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: text32Rect)
        text32TextContent.draw(in: CGRect(x: text32Rect.minX, y: text32Rect.minY + (text32Rect.height - text32TextHeight) / 2, width: text32Rect.width, height: text32TextHeight), withAttributes: text32FontAttributes)
        context.restoreGState()


        //// Text 33 Drawing
        let text33Rect = CGRect(x: 557, y: 60, width: 39.87, height: 13)
        let text33TextContent = "0x03"
        let text33Style = NSMutableParagraphStyle()
        text33Style.alignment = .left
        let text33FontAttributes = [NSAttributedStringKey.font: UIFont.systemFont(ofSize: UIFont.smallSystemFontSize), NSAttributedStringKey.foregroundColor: labelBlack, NSAttributedStringKey.paragraphStyle: text33Style] as [NSAttributedStringKey : Any]

        let text33TextHeight: CGFloat = text33TextContent.boundingRect(with: CGSize(width: text33Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: text33FontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: text33Rect)
        text33TextContent.draw(in: CGRect(x: text33Rect.minX, y: text33Rect.minY + (text33Rect.height - text33TextHeight) / 2, width: text33Rect.width, height: text33TextHeight), withAttributes: text33FontAttributes)
        context.restoreGState()




        //// Group 39
        //// Text 34 Drawing
        let text34Rect = CGRect(x: 475, y: 94, width: 22, height: 15)
        let text34TextContent = "M3"
        let text34Style = NSMutableParagraphStyle()
        text34Style.alignment = .right
        let text34FontAttributes = [NSAttributedStringKey.font: UIFont.systemFont(ofSize: UIFont.systemFontSize), NSAttributedStringKey.foregroundColor: labelBlack, NSAttributedStringKey.paragraphStyle: text34Style] as [NSAttributedStringKey : Any]

        let text34TextHeight: CGFloat = text34TextContent.boundingRect(with: CGSize(width: text34Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: text34FontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: text34Rect)
        text34TextContent.draw(in: CGRect(x: text34Rect.minX, y: text34Rect.minY + (text34Rect.height - text34TextHeight) / 2, width: text34Rect.width, height: text34TextHeight), withAttributes: text34FontAttributes)
        context.restoreGState()


        //// Rectangle 21 Drawing
        let rectangle21Path = UIBezierPath(rect: CGRect(x: 506.87, y: 93, width: 45, height: 17))
        mWhite.setFill()
        rectangle21Path.fill()
        aLUstrokeblack.setStroke()
        rectangle21Path.lineWidth = 1
        rectangle21Path.stroke()


        //// Rectangle 22 Drawing
        let rectangle22Path = UIBezierPath(rect: CGRect(x: 551.87, y: 93, width: 45, height: 17))
        mWhite.setFill()
        rectangle22Path.fill()
        aLUstrokeblack.setStroke()
        rectangle22Path.lineWidth = 1
        rectangle22Path.stroke()


        //// Text 35 Drawing
        let text35Rect = CGRect(x: 507, y: 80, width: 16, height: 13)
        let text35TextContent = "26"
        let text35Style = NSMutableParagraphStyle()
        text35Style.alignment = .left
        let text35FontAttributes = [NSAttributedStringKey.font: UIFont.systemFont(ofSize: UIFont.smallSystemFontSize), NSAttributedStringKey.foregroundColor: labelBlack, NSAttributedStringKey.paragraphStyle: text35Style] as [NSAttributedStringKey : Any]

        let text35TextHeight: CGFloat = text35TextContent.boundingRect(with: CGSize(width: text35Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: text35FontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: text35Rect)
        text35TextContent.draw(in: CGRect(x: text35Rect.minX, y: text35Rect.minY + (text35Rect.height - text35TextHeight) / 2, width: text35Rect.width, height: text35TextHeight), withAttributes: text35FontAttributes)
        context.restoreGState()


        //// Text 36 Drawing
        let text36Rect = CGRect(x: 552, y: 80, width: 16, height: 13)
        let text36TextContent = "27"
        let text36Style = NSMutableParagraphStyle()
        text36Style.alignment = .left
        let text36FontAttributes = [NSAttributedStringKey.font: UIFont.systemFont(ofSize: UIFont.smallSystemFontSize), NSAttributedStringKey.foregroundColor: labelBlack, NSAttributedStringKey.paragraphStyle: text36Style] as [NSAttributedStringKey : Any]

        let text36TextHeight: CGFloat = text36TextContent.boundingRect(with: CGSize(width: text36Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: text36FontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: text36Rect)
        text36TextContent.draw(in: CGRect(x: text36Rect.minX, y: text36Rect.minY + (text36Rect.height - text36TextHeight) / 2, width: text36Rect.width, height: text36TextHeight), withAttributes: text36FontAttributes)
        context.restoreGState()


        //// Text 37 Drawing
        let text37Rect = CGRect(x: 512, y: 95, width: 39.87, height: 13)
        let text37TextContent = "0x04"
        let text37Style = NSMutableParagraphStyle()
        text37Style.alignment = .left
        let text37FontAttributes = [NSAttributedStringKey.font: UIFont.systemFont(ofSize: UIFont.smallSystemFontSize), NSAttributedStringKey.foregroundColor: labelBlack, NSAttributedStringKey.paragraphStyle: text37Style] as [NSAttributedStringKey : Any]

        let text37TextHeight: CGFloat = text37TextContent.boundingRect(with: CGSize(width: text37Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: text37FontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: text37Rect)
        text37TextContent.draw(in: CGRect(x: text37Rect.minX, y: text37Rect.minY + (text37Rect.height - text37TextHeight) / 2, width: text37Rect.width, height: text37TextHeight), withAttributes: text37FontAttributes)
        context.restoreGState()


        //// Text 38 Drawing
        let text38Rect = CGRect(x: 557, y: 95, width: 39.87, height: 13)
        let text38TextContent = "0x08"
        let text38Style = NSMutableParagraphStyle()
        text38Style.alignment = .left
        let text38FontAttributes = [NSAttributedStringKey.font: UIFont.systemFont(ofSize: UIFont.smallSystemFontSize), NSAttributedStringKey.foregroundColor: labelBlack, NSAttributedStringKey.paragraphStyle: text38Style] as [NSAttributedStringKey : Any]

        let text38TextHeight: CGFloat = text38TextContent.boundingRect(with: CGSize(width: text38Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: text38FontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: text38Rect)
        text38TextContent.draw(in: CGRect(x: text38Rect.minX, y: text38Rect.minY + (text38Rect.height - text38TextHeight) / 2, width: text38Rect.width, height: text38TextHeight), withAttributes: text38FontAttributes)
        context.restoreGState()




        //// Group 40
        //// Text 39 Drawing
        let text39Rect = CGRect(x: 475, y: 129, width: 22, height: 15)
        let text39TextContent = "M4"
        let text39Style = NSMutableParagraphStyle()
        text39Style.alignment = .right
        let text39FontAttributes = [NSAttributedStringKey.font: UIFont.systemFont(ofSize: UIFont.systemFontSize), NSAttributedStringKey.foregroundColor: labelBlack, NSAttributedStringKey.paragraphStyle: text39Style] as [NSAttributedStringKey : Any]

        let text39TextHeight: CGFloat = text39TextContent.boundingRect(with: CGSize(width: text39Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: text39FontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: text39Rect)
        text39TextContent.draw(in: CGRect(x: text39Rect.minX, y: text39Rect.minY + (text39Rect.height - text39TextHeight) / 2, width: text39Rect.width, height: text39TextHeight), withAttributes: text39FontAttributes)
        context.restoreGState()


        //// Rectangle 23 Drawing
        let rectangle23Path = UIBezierPath(rect: CGRect(x: 506.87, y: 128, width: 45, height: 17))
        mWhite.setFill()
        rectangle23Path.fill()
        aLUstrokeblack.setStroke()
        rectangle23Path.lineWidth = 1
        rectangle23Path.stroke()


        //// Rectangle 24 Drawing
        let rectangle24Path = UIBezierPath(rect: CGRect(x: 551.87, y: 128, width: 45, height: 17))
        mWhite.setFill()
        rectangle24Path.fill()
        aLUstrokeblack.setStroke()
        rectangle24Path.lineWidth = 1
        rectangle24Path.stroke()


        //// Text 40 Drawing
        let text40Rect = CGRect(x: 507, y: 115, width: 16, height: 13)
        let text40TextContent = "28"
        let text40Style = NSMutableParagraphStyle()
        text40Style.alignment = .left
        let text40FontAttributes = [NSAttributedStringKey.font: UIFont.systemFont(ofSize: UIFont.smallSystemFontSize), NSAttributedStringKey.foregroundColor: labelBlack, NSAttributedStringKey.paragraphStyle: text40Style] as [NSAttributedStringKey : Any]

        let text40TextHeight: CGFloat = text40TextContent.boundingRect(with: CGSize(width: text40Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: text40FontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: text40Rect)
        text40TextContent.draw(in: CGRect(x: text40Rect.minX, y: text40Rect.minY + (text40Rect.height - text40TextHeight) / 2, width: text40Rect.width, height: text40TextHeight), withAttributes: text40FontAttributes)
        context.restoreGState()


        //// Text 49 Drawing
        let text49Rect = CGRect(x: 552, y: 115, width: 16, height: 13)
        let text49TextContent = "29"
        let text49Style = NSMutableParagraphStyle()
        text49Style.alignment = .left
        let text49FontAttributes = [NSAttributedStringKey.font: UIFont.systemFont(ofSize: UIFont.smallSystemFontSize), NSAttributedStringKey.foregroundColor: labelBlack, NSAttributedStringKey.paragraphStyle: text49Style] as [NSAttributedStringKey : Any]

        let text49TextHeight: CGFloat = text49TextContent.boundingRect(with: CGSize(width: text49Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: text49FontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: text49Rect)
        text49TextContent.draw(in: CGRect(x: text49Rect.minX, y: text49Rect.minY + (text49Rect.height - text49TextHeight) / 2, width: text49Rect.width, height: text49TextHeight), withAttributes: text49FontAttributes)
        context.restoreGState()


        //// Text 50 Drawing
        let text50Rect = CGRect(x: 512, y: 130, width: 39.87, height: 13)
        let text50TextContent = "0xF0"
        let text50Style = NSMutableParagraphStyle()
        text50Style.alignment = .left
        let text50FontAttributes = [NSAttributedStringKey.font: UIFont.systemFont(ofSize: UIFont.smallSystemFontSize), NSAttributedStringKey.foregroundColor: labelBlack, NSAttributedStringKey.paragraphStyle: text50Style] as [NSAttributedStringKey : Any]

        let text50TextHeight: CGFloat = text50TextContent.boundingRect(with: CGSize(width: text50Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: text50FontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: text50Rect)
        text50TextContent.draw(in: CGRect(x: text50Rect.minX, y: text50Rect.minY + (text50Rect.height - text50TextHeight) / 2, width: text50Rect.width, height: text50TextHeight), withAttributes: text50FontAttributes)
        context.restoreGState()


        //// Text 51 Drawing
        let text51Rect = CGRect(x: 557, y: 130, width: 39.87, height: 13)
        let text51TextContent = "0xF6"
        let text51Style = NSMutableParagraphStyle()
        text51Style.alignment = .left
        let text51FontAttributes = [NSAttributedStringKey.font: UIFont.systemFont(ofSize: UIFont.smallSystemFontSize), NSAttributedStringKey.foregroundColor: labelBlack, NSAttributedStringKey.paragraphStyle: text51Style] as [NSAttributedStringKey : Any]

        let text51TextHeight: CGFloat = text51TextContent.boundingRect(with: CGSize(width: text51Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: text51FontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: text51Rect)
        text51TextContent.draw(in: CGRect(x: text51Rect.minX, y: text51Rect.minY + (text51Rect.height - text51TextHeight) / 2, width: text51Rect.width, height: text51TextHeight), withAttributes: text51FontAttributes)
        context.restoreGState()




        //// Group 41
        //// Text 52 Drawing
        let text52Rect = CGRect(x: 475, y: 164, width: 22, height: 15)
        let text52TextContent = "M5"
        let text52Style = NSMutableParagraphStyle()
        text52Style.alignment = .right
        let text52FontAttributes = [NSAttributedStringKey.font: UIFont.systemFont(ofSize: UIFont.systemFontSize), NSAttributedStringKey.foregroundColor: labelBlack, NSAttributedStringKey.paragraphStyle: text52Style] as [NSAttributedStringKey : Any]

        let text52TextHeight: CGFloat = text52TextContent.boundingRect(with: CGSize(width: text52Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: text52FontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: text52Rect)
        text52TextContent.draw(in: CGRect(x: text52Rect.minX, y: text52Rect.minY + (text52Rect.height - text52TextHeight) / 2, width: text52Rect.width, height: text52TextHeight), withAttributes: text52FontAttributes)
        context.restoreGState()


        //// Rectangle 25 Drawing
        let rectangle25Path = UIBezierPath(rect: CGRect(x: 506.87, y: 163, width: 45, height: 17))
        mWhite.setFill()
        rectangle25Path.fill()
        aLUstrokeblack.setStroke()
        rectangle25Path.lineWidth = 1
        rectangle25Path.stroke()


        //// Rectangle 26 Drawing
        let rectangle26Path = UIBezierPath(rect: CGRect(x: 551.87, y: 163, width: 45, height: 17))
        mWhite.setFill()
        rectangle26Path.fill()
        aLUstrokeblack.setStroke()
        rectangle26Path.lineWidth = 1
        rectangle26Path.stroke()


        //// Text 53 Drawing
        let text53Rect = CGRect(x: 507, y: 150, width: 16, height: 13)
        let text53TextContent = "30"
        let text53Style = NSMutableParagraphStyle()
        text53Style.alignment = .left
        let text53FontAttributes = [NSAttributedStringKey.font: UIFont.systemFont(ofSize: UIFont.smallSystemFontSize), NSAttributedStringKey.foregroundColor: labelBlack, NSAttributedStringKey.paragraphStyle: text53Style] as [NSAttributedStringKey : Any]

        let text53TextHeight: CGFloat = text53TextContent.boundingRect(with: CGSize(width: text53Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: text53FontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: text53Rect)
        text53TextContent.draw(in: CGRect(x: text53Rect.minX, y: text53Rect.minY + (text53Rect.height - text53TextHeight) / 2, width: text53Rect.width, height: text53TextHeight), withAttributes: text53FontAttributes)
        context.restoreGState()


        //// Text 54 Drawing
        let text54Rect = CGRect(x: 552, y: 150, width: 16, height: 13)
        let text54TextContent = "31"
        let text54Style = NSMutableParagraphStyle()
        text54Style.alignment = .left
        let text54FontAttributes = [NSAttributedStringKey.font: UIFont.systemFont(ofSize: UIFont.smallSystemFontSize), NSAttributedStringKey.foregroundColor: labelBlack, NSAttributedStringKey.paragraphStyle: text54Style] as [NSAttributedStringKey : Any]

        let text54TextHeight: CGFloat = text54TextContent.boundingRect(with: CGSize(width: text54Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: text54FontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: text54Rect)
        text54TextContent.draw(in: CGRect(x: text54Rect.minX, y: text54Rect.minY + (text54Rect.height - text54TextHeight) / 2, width: text54Rect.width, height: text54TextHeight), withAttributes: text54FontAttributes)
        context.restoreGState()


        //// Text 55 Drawing
        let text55Rect = CGRect(x: 512, y: 165, width: 39.87, height: 13)
        let text55TextContent = "0xFE"
        let text55Style = NSMutableParagraphStyle()
        text55Style.alignment = .left
        let text55FontAttributes = [NSAttributedStringKey.font: UIFont.systemFont(ofSize: UIFont.smallSystemFontSize), NSAttributedStringKey.foregroundColor: labelBlack, NSAttributedStringKey.paragraphStyle: text55Style] as [NSAttributedStringKey : Any]

        let text55TextHeight: CGFloat = text55TextContent.boundingRect(with: CGSize(width: text55Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: text55FontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: text55Rect)
        text55TextContent.draw(in: CGRect(x: text55Rect.minX, y: text55Rect.minY + (text55Rect.height - text55TextHeight) / 2, width: text55Rect.width, height: text55TextHeight), withAttributes: text55FontAttributes)
        context.restoreGState()


        //// Text 56 Drawing
        let text56Rect = CGRect(x: 557, y: 165, width: 39.87, height: 13)
        let text56TextContent = "0xFF"
        let text56Style = NSMutableParagraphStyle()
        text56Style.alignment = .left
        let text56FontAttributes = [NSAttributedStringKey.font: UIFont.systemFont(ofSize: UIFont.smallSystemFontSize), NSAttributedStringKey.foregroundColor: labelBlack, NSAttributedStringKey.paragraphStyle: text56Style] as [NSAttributedStringKey : Any]

        let text56TextHeight: CGFloat = text56TextContent.boundingRect(with: CGSize(width: text56Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: text56FontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: text56Rect)
        text56TextContent.draw(in: CGRect(x: text56Rect.minX, y: text56Rect.minY + (text56Rect.height - text56TextHeight) / 2, width: text56Rect.width, height: text56TextHeight), withAttributes: text56FontAttributes)
        context.restoreGState()




        //// RightHandText
        //// Text 60 Drawing
        let text60Rect = CGRect(x: 760, y: 108, width: 14, height: 15)
        let text60TextContent = "C"
        let text60Style = NSMutableParagraphStyle()
        text60Style.alignment = .left
        let text60FontAttributes = [NSAttributedStringKey.font: UIFont.systemFont(ofSize: UIFont.systemFontSize), NSAttributedStringKey.foregroundColor: labelBlack, NSAttributedStringKey.paragraphStyle: text60Style] as [NSAttributedStringKey : Any]

        let text60TextHeight: CGFloat = text60TextContent.boundingRect(with: CGSize(width: text60Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: text60FontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: text60Rect)
        text60TextContent.draw(in: CGRect(x: text60Rect.minX, y: text60Rect.minY + (text60Rect.height - text60TextHeight) / 2, width: text60Rect.width, height: text60TextHeight), withAttributes: text60FontAttributes)
        context.restoreGState()


        //// LoadCK Drawing
        let loadCKRect = CGRect(x: 760, y: 55, width: 60.03, height: 15)
        let loadCKTextContent = "LoadCK"
        let loadCKStyle = NSMutableParagraphStyle()
        loadCKStyle.alignment = .left
        let loadCKFontAttributes = [NSAttributedStringKey.font: UIFont.systemFont(ofSize: UIFont.systemFontSize), NSAttributedStringKey.foregroundColor: labelBlack, NSAttributedStringKey.paragraphStyle: loadCKStyle] as [NSAttributedStringKey : Any]

        let loadCKTextHeight: CGFloat = loadCKTextContent.boundingRect(with: CGSize(width: loadCKRect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: loadCKFontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: loadCKRect)
        loadCKTextContent.draw(in: CGRect(x: loadCKRect.minX, y: loadCKRect.minY + (loadCKRect.height - loadCKTextHeight) / 2, width: loadCKRect.width, height: loadCKTextHeight), withAttributes: loadCKFontAttributes)
        context.restoreGState()


        //// Text 62 Drawing
        let text62Rect = CGRect(x: 760, y: 138, width: 14, height: 15)
        let text62TextContent = "B"
        let text62Style = NSMutableParagraphStyle()
        text62Style.alignment = .left
        let text62FontAttributes = [NSAttributedStringKey.font: UIFont.systemFont(ofSize: UIFont.systemFontSize), NSAttributedStringKey.foregroundColor: labelBlack, NSAttributedStringKey.paragraphStyle: text62Style] as [NSAttributedStringKey : Any]

        let text62TextHeight: CGFloat = text62TextContent.boundingRect(with: CGSize(width: text62Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: text62FontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: text62Rect)
        text62TextContent.draw(in: CGRect(x: text62Rect.minX, y: text62Rect.minY + (text62Rect.height - text62TextHeight) / 2, width: text62Rect.width, height: text62TextHeight), withAttributes: text62FontAttributes)
        context.restoreGState()


        //// Text 63 Drawing
        let text63Rect = CGRect(x: 760, y: 168, width: 14, height: 15)
        let text63TextContent = "A"
        let text63Style = NSMutableParagraphStyle()
        text63Style.alignment = .left
        let text63FontAttributes = [NSAttributedStringKey.font: UIFont.systemFont(ofSize: UIFont.systemFontSize), NSAttributedStringKey.foregroundColor: labelBlack, NSAttributedStringKey.paragraphStyle: text63Style] as [NSAttributedStringKey : Any]

        let text63TextHeight: CGFloat = text63TextContent.boundingRect(with: CGSize(width: text63Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: text63FontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: text63Rect)
        text63TextContent.draw(in: CGRect(x: text63Rect.minX, y: text63Rect.minY + (text63Rect.height - text63TextHeight) / 2, width: text63Rect.width, height: text63TextHeight), withAttributes: text63FontAttributes)
        context.restoreGState()


        //// Text 64 Drawing
        let text64Rect = CGRect(x: 760, y: 273, width: 68, height: 15)
        let text64TextContent = "MARCk"
        let text64Style = NSMutableParagraphStyle()
        text64Style.alignment = .left
        let text64FontAttributes = [NSAttributedStringKey.font: UIFont.systemFont(ofSize: UIFont.systemFontSize), NSAttributedStringKey.foregroundColor: labelBlack, NSAttributedStringKey.paragraphStyle: text64Style] as [NSAttributedStringKey : Any]

        let text64TextHeight: CGFloat = text64TextContent.boundingRect(with: CGSize(width: text64Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: text64FontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: text64Rect)
        text64TextContent.draw(in: CGRect(x: text64Rect.minX, y: text64Rect.minY + (text64Rect.height - text64TextHeight) / 2, width: text64Rect.width, height: text64TextHeight), withAttributes: text64FontAttributes)
        context.restoreGState()


        //// Text 65 Drawing
        let text65Rect = CGRect(x: 760, y: 358, width: 51.5, height: 15)
        let text65TextContent = "MDRCk"
        let text65Style = NSMutableParagraphStyle()
        text65Style.alignment = .left
        let text65FontAttributes = [NSAttributedStringKey.font: UIFont.systemFont(ofSize: UIFont.systemFontSize), NSAttributedStringKey.foregroundColor: labelBlack, NSAttributedStringKey.paragraphStyle: text65Style] as [NSAttributedStringKey : Any]

        let text65TextHeight: CGFloat = text65TextContent.boundingRect(with: CGSize(width: text65Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: text65FontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: text65Rect)
        text65TextContent.draw(in: CGRect(x: text65Rect.minX, y: text65Rect.minY + (text65Rect.height - text65TextHeight) / 2, width: text65Rect.width, height: text65TextHeight), withAttributes: text65FontAttributes)
        context.restoreGState()


        //// Text 66 Drawing
        let text66Rect = CGRect(x: 760, y: 453, width: 51.5, height: 15)
        let text66TextContent = "AMUX"
        let text66Style = NSMutableParagraphStyle()
        text66Style.alignment = .left
        let text66FontAttributes = [NSAttributedStringKey.font: UIFont.systemFont(ofSize: UIFont.systemFontSize), NSAttributedStringKey.foregroundColor: labelBlack, NSAttributedStringKey.paragraphStyle: text66Style] as [NSAttributedStringKey : Any]

        let text66TextHeight: CGFloat = text66TextContent.boundingRect(with: CGSize(width: text66Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: text66FontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: text66Rect)
        text66TextContent.draw(in: CGRect(x: text66Rect.minX, y: text66Rect.minY + (text66Rect.height - text66TextHeight) / 2, width: text66Rect.width, height: text66TextHeight), withAttributes: text66FontAttributes)
        context.restoreGState()


        //// Text 67 Drawing
        let text67Rect = CGRect(x: 760, y: 498, width: 58.8, height: 15)
        let text67TextContent = "MDRMux"
        let text67Style = NSMutableParagraphStyle()
        text67Style.alignment = .left
        let text67FontAttributes = [NSAttributedStringKey.font: UIFont.systemFont(ofSize: UIFont.systemFontSize), NSAttributedStringKey.foregroundColor: labelBlack, NSAttributedStringKey.paragraphStyle: text67Style] as [NSAttributedStringKey : Any]

        let text67TextHeight: CGFloat = text67TextContent.boundingRect(with: CGSize(width: text67Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: text67FontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: text67Rect)
        text67TextContent.draw(in: CGRect(x: text67Rect.minX, y: text67Rect.minY + (text67Rect.height - text67TextHeight) / 2, width: text67Rect.width, height: text67TextHeight), withAttributes: text67FontAttributes)
        context.restoreGState()


        //// Text 68 Drawing
        let text68Rect = CGRect(x: 760, y: 563, width: 58.8, height: 15)
        let text68TextContent = "CMux"
        let text68Style = NSMutableParagraphStyle()
        text68Style.alignment = .left
        let text68FontAttributes = [NSAttributedStringKey.font: UIFont.systemFont(ofSize: UIFont.systemFontSize), NSAttributedStringKey.foregroundColor: labelBlack, NSAttributedStringKey.paragraphStyle: text68Style] as [NSAttributedStringKey : Any]

        let text68TextHeight: CGFloat = text68TextContent.boundingRect(with: CGSize(width: text68Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: text68FontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: text68Rect)
        text68TextContent.draw(in: CGRect(x: text68Rect.minX, y: text68Rect.minY + (text68Rect.height - text68TextHeight) / 2, width: text68Rect.width, height: text68TextHeight), withAttributes: text68FontAttributes)
        context.restoreGState()


        //// Text 69 Drawing
        let text69Rect = CGRect(x: 760, y: 588, width: 41.72, height: 15)
        let text69TextContent = "ALU"
        let text69Style = NSMutableParagraphStyle()
        text69Style.alignment = .left
        let text69FontAttributes = [NSAttributedStringKey.font: UIFont.systemFont(ofSize: UIFont.systemFontSize), NSAttributedStringKey.foregroundColor: labelBlack, NSAttributedStringKey.paragraphStyle: text69Style] as [NSAttributedStringKey : Any]

        let text69TextHeight: CGFloat = text69TextContent.boundingRect(with: CGSize(width: text69Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: text69FontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: text69Rect)
        text69TextContent.draw(in: CGRect(x: text69Rect.minX, y: text69Rect.minY + (text69Rect.height - text69TextHeight) / 2, width: text69Rect.width, height: text69TextHeight), withAttributes: text69FontAttributes)
        context.restoreGState()


        //// Text 70 Drawing
        let text70Rect = CGRect(x: 760, y: 643, width: 51.5, height: 15)
        let text70TextContent = "CSMux"
        let text70Style = NSMutableParagraphStyle()
        text70Style.alignment = .left
        let text70FontAttributes = [NSAttributedStringKey.font: UIFont.systemFont(ofSize: UIFont.systemFontSize), NSAttributedStringKey.foregroundColor: labelBlack, NSAttributedStringKey.paragraphStyle: text70Style] as [NSAttributedStringKey : Any]

        let text70TextHeight: CGFloat = text70TextContent.boundingRect(with: CGSize(width: text70Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: text70FontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: text70Rect)
        text70TextContent.draw(in: CGRect(x: text70Rect.minX, y: text70Rect.minY + (text70Rect.height - text70TextHeight) / 2, width: text70Rect.width, height: text70TextHeight), withAttributes: text70FontAttributes)
        context.restoreGState()


        //// Text 71 Drawing
        let text71Rect = CGRect(x: 760, y: 693, width: 41.72, height: 15)
        let text71TextContent = "SCk"
        let text71Style = NSMutableParagraphStyle()
        text71Style.alignment = .left
        let text71FontAttributes = [NSAttributedStringKey.font: UIFont.systemFont(ofSize: UIFont.systemFontSize), NSAttributedStringKey.foregroundColor: labelBlack, NSAttributedStringKey.paragraphStyle: text71Style] as [NSAttributedStringKey : Any]

        let text71TextHeight: CGFloat = text71TextContent.boundingRect(with: CGSize(width: text71Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: text71FontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: text71Rect)
        text71TextContent.draw(in: CGRect(x: text71Rect.minX, y: text71Rect.minY + (text71Rect.height - text71TextHeight) / 2, width: text71Rect.width, height: text71TextHeight), withAttributes: text71FontAttributes)
        context.restoreGState()


        //// Text 72 Drawing
        let text72Rect = CGRect(x: 760, y: 728, width: 41.72, height: 15)
        let text72TextContent = "CCk"
        let text72Style = NSMutableParagraphStyle()
        text72Style.alignment = .left
        let text72FontAttributes = [NSAttributedStringKey.font: UIFont.systemFont(ofSize: UIFont.systemFontSize), NSAttributedStringKey.foregroundColor: labelBlack, NSAttributedStringKey.paragraphStyle: text72Style] as [NSAttributedStringKey : Any]

        let text72TextHeight: CGFloat = text72TextContent.boundingRect(with: CGSize(width: text72Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: text72FontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: text72Rect)
        text72TextContent.draw(in: CGRect(x: text72Rect.minX, y: text72Rect.minY + (text72Rect.height - text72TextHeight) / 2, width: text72Rect.width, height: text72TextHeight), withAttributes: text72FontAttributes)
        context.restoreGState()


        //// Text 73 Drawing
        let text73Rect = CGRect(x: 760, y: 763, width: 41.72, height: 15)
        let text73TextContent = "VCk"
        let text73Style = NSMutableParagraphStyle()
        text73Style.alignment = .left
        let text73FontAttributes = [NSAttributedStringKey.font: UIFont.systemFont(ofSize: UIFont.systemFontSize), NSAttributedStringKey.foregroundColor: labelBlack, NSAttributedStringKey.paragraphStyle: text73Style] as [NSAttributedStringKey : Any]

        let text73TextHeight: CGFloat = text73TextContent.boundingRect(with: CGSize(width: text73Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: text73FontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: text73Rect)
        text73TextContent.draw(in: CGRect(x: text73Rect.minX, y: text73Rect.minY + (text73Rect.height - text73TextHeight) / 2, width: text73Rect.width, height: text73TextHeight), withAttributes: text73FontAttributes)
        context.restoreGState()


        //// Text 74 Drawing
        let text74Rect = CGRect(x: 760, y: 812.85, width: 41.72, height: 15)
        let text74TextContent = "AndZ"
        let text74Style = NSMutableParagraphStyle()
        text74Style.alignment = .left
        let text74FontAttributes = [NSAttributedStringKey.font: UIFont.systemFont(ofSize: UIFont.systemFontSize), NSAttributedStringKey.foregroundColor: labelBlack, NSAttributedStringKey.paragraphStyle: text74Style] as [NSAttributedStringKey : Any]

        let text74TextHeight: CGFloat = text74TextContent.boundingRect(with: CGSize(width: text74Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: text74FontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: text74Rect)
        text74TextContent.draw(in: CGRect(x: text74Rect.minX, y: text74Rect.minY + (text74Rect.height - text74TextHeight) / 2, width: text74Rect.width, height: text74TextHeight), withAttributes: text74FontAttributes)
        context.restoreGState()


        //// Text 75 Drawing
        let text75Rect = CGRect(x: 760, y: 848, width: 41.72, height: 15)
        let text75TextContent = "ZCk"
        let text75Style = NSMutableParagraphStyle()
        text75Style.alignment = .left
        let text75FontAttributes = [NSAttributedStringKey.font: UIFont.systemFont(ofSize: UIFont.systemFontSize), NSAttributedStringKey.foregroundColor: labelBlack, NSAttributedStringKey.paragraphStyle: text75Style] as [NSAttributedStringKey : Any]

        let text75TextHeight: CGFloat = text75TextContent.boundingRect(with: CGSize(width: text75Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: text75FontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: text75Rect)
        text75TextContent.draw(in: CGRect(x: text75Rect.minX, y: text75Rect.minY + (text75Rect.height - text75TextHeight) / 2, width: text75Rect.width, height: text75TextHeight), withAttributes: text75FontAttributes)
        context.restoreGState()


        //// Text 76 Drawing
        let text76Rect = CGRect(x: 760, y: 918, width: 51.5, height: 15)
        let text76TextContent = "NCk"
        let text76Style = NSMutableParagraphStyle()
        text76Style.alignment = .left
        let text76FontAttributes = [NSAttributedStringKey.font: UIFont.systemFont(ofSize: UIFont.systemFontSize), NSAttributedStringKey.foregroundColor: labelBlack, NSAttributedStringKey.paragraphStyle: text76Style] as [NSAttributedStringKey : Any]

        let text76TextHeight: CGFloat = text76TextContent.boundingRect(with: CGSize(width: text76Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: text76FontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: text76Rect)
        text76TextContent.draw(in: CGRect(x: text76Rect.minX, y: text76Rect.minY + (text76Rect.height - text76TextHeight) / 2, width: text76Rect.width, height: text76TextHeight), withAttributes: text76FontAttributes)
        context.restoreGState()


        //// Text 77 Drawing
        let text77Rect = CGRect(x: 760, y: 963, width: 68, height: 15)
        let text77TextContent = "MemWrite"
        let text77Style = NSMutableParagraphStyle()
        text77Style.alignment = .left
        let text77FontAttributes = [NSAttributedStringKey.font: UIFont.systemFont(ofSize: UIFont.systemFontSize), NSAttributedStringKey.foregroundColor: labelBlack, NSAttributedStringKey.paragraphStyle: text77Style] as [NSAttributedStringKey : Any]

        let text77TextHeight: CGFloat = text77TextContent.boundingRect(with: CGSize(width: text77Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: text77FontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: text77Rect)
        text77TextContent.draw(in: CGRect(x: text77Rect.minX, y: text77Rect.minY + (text77Rect.height - text77TextHeight) / 2, width: text77Rect.width, height: text77TextHeight), withAttributes: text77FontAttributes)
        context.restoreGState()


        //// Text 78 Drawing
        let text78Rect = CGRect(x: 760, y: 978, width: 78.79, height: 15)
        let text78TextContent = "MemRead"
        let text78Style = NSMutableParagraphStyle()
        text78Style.alignment = .left
        let text78FontAttributes = [NSAttributedStringKey.font: UIFont.systemFont(ofSize: UIFont.systemFontSize), NSAttributedStringKey.foregroundColor: labelBlack, NSAttributedStringKey.paragraphStyle: text78Style] as [NSAttributedStringKey : Any]

        let text78TextHeight: CGFloat = text78TextContent.boundingRect(with: CGSize(width: text78Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: text78FontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: text78Rect)
        text78TextContent.draw(in: CGRect(x: text78Rect.minX, y: text78Rect.minY + (text78Rect.height - text78TextHeight) / 2, width: text78Rect.width, height: text78TextHeight), withAttributes: text78FontAttributes)
        context.restoreGState()




        //// Text 79 Drawing
        let text79Rect = CGRect(x: 362, y: 188, width: 68, height: 15)
        let text79TextContent = " CBus"
        let text79Style = NSMutableParagraphStyle()
        text79Style.alignment = .left
        let text79FontAttributes = [NSAttributedStringKey.font: UIFont.systemFont(ofSize: UIFont.systemFontSize), NSAttributedStringKey.foregroundColor: labelBlack, NSAttributedStringKey.paragraphStyle: text79Style] as [NSAttributedStringKey : Any]

        let text79TextHeight: CGFloat = text79TextContent.boundingRect(with: CGSize(width: text79Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: text79FontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: text79Rect)
        text79TextContent.draw(in: CGRect(x: text79Rect.minX, y: text79Rect.minY + (text79Rect.height - text79TextHeight) / 2, width: text79Rect.width, height: text79TextHeight), withAttributes: text79FontAttributes)
        context.restoreGState()


        //// Text 80 Drawing
        let text80Rect = CGRect(x: 474.5, y: 188, width: 68, height: 15)
        let text80TextContent = " ABus"
        let text80Style = NSMutableParagraphStyle()
        text80Style.alignment = .left
        let text80FontAttributes = [NSAttributedStringKey.font: UIFont.systemFont(ofSize: UIFont.systemFontSize), NSAttributedStringKey.foregroundColor: labelBlack, NSAttributedStringKey.paragraphStyle: text80Style] as [NSAttributedStringKey : Any]

        let text80TextHeight: CGFloat = text80TextContent.boundingRect(with: CGSize(width: text80Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: text80FontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: text80Rect)
        text80TextContent.draw(in: CGRect(x: text80Rect.minX, y: text80Rect.minY + (text80Rect.height - text80TextHeight) / 2, width: text80Rect.width, height: text80TextHeight), withAttributes: text80FontAttributes)
        context.restoreGState()


        //// Text 81 Drawing
        let text81Rect = CGRect(x: 569.5, y: 188, width: 68, height: 15)
        let text81TextContent = " BBus"
        let text81Style = NSMutableParagraphStyle()
        text81Style.alignment = .left
        let text81FontAttributes = [NSAttributedStringKey.font: UIFont.systemFont(ofSize: UIFont.systemFontSize), NSAttributedStringKey.foregroundColor: labelBlack, NSAttributedStringKey.paragraphStyle: text81Style] as [NSAttributedStringKey : Any]

        let text81TextHeight: CGFloat = text81TextContent.boundingRect(with: CGSize(width: text81Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: text81FontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: text81Rect)
        text81TextContent.draw(in: CGRect(x: text81Rect.minX, y: text81Rect.minY + (text81Rect.height - text81TextHeight) / 2, width: text81Rect.width, height: text81TextHeight), withAttributes: text81FontAttributes)
        context.restoreGState()


        //// Text 82 Drawing
        let text82Rect = CGRect(x: 35.5, y: 212.66, width: 68, height: 35.96)
        let text82TextContent = " System\nBus"
        let text82Style = NSMutableParagraphStyle()
        text82Style.alignment = .center
        let text82FontAttributes = [NSAttributedStringKey.font: UIFont.systemFont(ofSize: UIFont.systemFontSize), NSAttributedStringKey.foregroundColor: labelBlack, NSAttributedStringKey.paragraphStyle: text82Style] as [NSAttributedStringKey : Any]

        let text82TextHeight: CGFloat = text82TextContent.boundingRect(with: CGSize(width: text82Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: text82FontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: text82Rect)
        text82TextContent.draw(in: CGRect(x: text82Rect.minX, y: text82Rect.minY + (text82Rect.height - text82TextHeight) / 2, width: text82Rect.width, height: text82TextHeight), withAttributes: text82FontAttributes)
        context.restoreGState()


        //// Text 83 Drawing
        let text83Rect = CGRect(x: 195.5, y: 230, width: 68, height: 15)
        let text83TextContent = "MARB"
        let text83Style = NSMutableParagraphStyle()
        text83Style.alignment = .center
        let text83FontAttributes = [NSAttributedStringKey.font: UIFont.systemFont(ofSize: UIFont.systemFontSize), NSAttributedStringKey.foregroundColor: labelBlack, NSAttributedStringKey.paragraphStyle: text83Style] as [NSAttributedStringKey : Any]

        let text83TextHeight: CGFloat = text83TextContent.boundingRect(with: CGSize(width: text83Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: text83FontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: text83Rect)
        text83TextContent.draw(in: CGRect(x: text83Rect.minX, y: text83Rect.minY + (text83Rect.height - text83TextHeight) / 2, width: text83Rect.width, height: text83TextHeight), withAttributes: text83FontAttributes)
        context.restoreGState()


        //// Text 84 Drawing
        let text84Rect = CGRect(x: 195.5, y: 315, width: 68, height: 15)
        let text84TextContent = "MARA"
        let text84Style = NSMutableParagraphStyle()
        text84Style.alignment = .center
        let text84FontAttributes = [NSAttributedStringKey.font: UIFont.systemFont(ofSize: UIFont.systemFontSize), NSAttributedStringKey.foregroundColor: labelBlack, NSAttributedStringKey.paragraphStyle: text84Style] as [NSAttributedStringKey : Any]

        let text84TextHeight: CGFloat = text84TextContent.boundingRect(with: CGSize(width: text84Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: text84FontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: text84Rect)
        text84TextContent.draw(in: CGRect(x: text84Rect.minX, y: text84Rect.minY + (text84Rect.height - text84TextHeight) / 2, width: text84Rect.width, height: text84TextHeight), withAttributes: text84FontAttributes)
        context.restoreGState()


        //// Text 85 Drawing
        let text85Rect = CGRect(x: 196, y: 395, width: 68, height: 15)
        let text85TextContent = "MDR"
        let text85Style = NSMutableParagraphStyle()
        text85Style.alignment = .center
        let text85FontAttributes = [NSAttributedStringKey.font: UIFont.systemFont(ofSize: UIFont.systemFontSize), NSAttributedStringKey.foregroundColor: labelBlack, NSAttributedStringKey.paragraphStyle: text85Style] as [NSAttributedStringKey : Any]

        let text85TextHeight: CGFloat = text85TextContent.boundingRect(with: CGSize(width: text85Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: text85FontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: text85Rect)
        text85TextContent.draw(in: CGRect(x: text85Rect.minX, y: text85Rect.minY + (text85Rect.height - text85TextHeight) / 2, width: text85Rect.width, height: text85TextHeight), withAttributes: text85FontAttributes)
        context.restoreGState()


        //// Text 86 Drawing
        let text86Rect = CGRect(x: 195.5, y: 465.82, width: 68, height: 15)
        let text86TextContent = "MDRMux "
        let text86Style = NSMutableParagraphStyle()
        text86Style.alignment = .center
        let text86FontAttributes = [NSAttributedStringKey.font: UIFont.systemFont(ofSize: UIFont.systemFontSize), NSAttributedStringKey.foregroundColor: labelBlack, NSAttributedStringKey.paragraphStyle: text86Style] as [NSAttributedStringKey : Any]

        let text86TextHeight: CGFloat = text86TextContent.boundingRect(with: CGSize(width: text86Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: text86FontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: text86Rect)
        text86TextContent.draw(in: CGRect(x: text86Rect.minX, y: text86Rect.minY + (text86Rect.height - text86TextHeight) / 2, width: text86Rect.width, height: text86TextHeight), withAttributes: text86FontAttributes)
        context.restoreGState()


        //// Text 87 Drawing
        let text87Rect = CGRect(x: 394, y: 454.4, width: 68, height: 15)
        let text87TextContent = "AMux"
        let text87Style = NSMutableParagraphStyle()
        text87Style.alignment = .center
        let text87FontAttributes = [NSAttributedStringKey.font: UIFont.systemFont(ofSize: UIFont.systemFontSize), NSAttributedStringKey.foregroundColor: labelBlack, NSAttributedStringKey.paragraphStyle: text87Style] as [NSAttributedStringKey : Any]

        let text87TextHeight: CGFloat = text87TextContent.boundingRect(with: CGSize(width: text87Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: text87FontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: text87Rect)
        text87TextContent.draw(in: CGRect(x: text87Rect.minX, y: text87Rect.minY + (text87Rect.height - text87TextHeight) / 2, width: text87Rect.width, height: text87TextHeight), withAttributes: text87FontAttributes)
        context.restoreGState()


        //// Text 88 Drawing
        let text88Rect = CGRect(x: 311, y: 599.06, width: 68, height: 15)
        let text88TextContent = "CMux"
        let text88Style = NSMutableParagraphStyle()
        text88Style.alignment = .center
        let text88FontAttributes = [NSAttributedStringKey.font: UIFont.systemFont(ofSize: UIFont.systemFontSize), NSAttributedStringKey.foregroundColor: labelBlack, NSAttributedStringKey.paragraphStyle: text88Style] as [NSAttributedStringKey : Any]

        let text88TextHeight: CGFloat = text88TextContent.boundingRect(with: CGSize(width: text88Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: text88FontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: text88Rect)
        text88TextContent.draw(in: CGRect(x: text88Rect.minX, y: text88Rect.minY + (text88Rect.height - text88TextHeight) / 2, width: text88Rect.width, height: text88TextHeight), withAttributes: text88FontAttributes)
        context.restoreGState()


        //// Text 89 Drawing
        let text89Rect = CGRect(x: 464, y: 567.5, width: 68, height: 15)
        let text89TextContent = "ALU"
        let text89Style = NSMutableParagraphStyle()
        text89Style.alignment = .center
        let text89FontAttributes = [NSAttributedStringKey.font: UIFont.systemFont(ofSize: UIFont.systemFontSize), NSAttributedStringKey.foregroundColor: labelBlack, NSAttributedStringKey.paragraphStyle: text89Style] as [NSAttributedStringKey : Any]

        let text89TextHeight: CGFloat = text89TextContent.boundingRect(with: CGSize(width: text89Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: text89FontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: text89Rect)
        text89TextContent.draw(in: CGRect(x: text89Rect.minX, y: text89Rect.minY + (text89Rect.height - text89TextHeight) / 2, width: text89Rect.width, height: text89TextHeight), withAttributes: text89FontAttributes)
        context.restoreGState()


        //// Text 91 Drawing
        let text91Rect = CGRect(x: 605.5, y: 644.5, width: 68, height: 15)
        let text91TextContent = "CSMux"
        let text91Style = NSMutableParagraphStyle()
        text91Style.alignment = .center
        let text91FontAttributes = [NSAttributedStringKey.font: UIFont.systemFont(ofSize: UIFont.systemFontSize), NSAttributedStringKey.foregroundColor: labelBlack, NSAttributedStringKey.paragraphStyle: text91Style] as [NSAttributedStringKey : Any]

        let text91TextHeight: CGFloat = text91TextContent.boundingRect(with: CGSize(width: text91Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: text91FontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: text91Rect)
        text91TextContent.draw(in: CGRect(x: text91Rect.minX, y: text91Rect.minY + (text91Rect.height - text91TextHeight) / 2, width: text91Rect.width, height: text91TextHeight), withAttributes: text91FontAttributes)
        context.restoreGState()


        //// Text 93 Drawing
        let text93Rect = CGRect(x: 643.5, y: 695, width: 68, height: 15)
        let text93TextContent = "S"
        let text93Style = NSMutableParagraphStyle()
        text93Style.alignment = .center
        let text93FontAttributes = [NSAttributedStringKey.font: UIFont.systemFont(ofSize: UIFont.systemFontSize), NSAttributedStringKey.foregroundColor: labelBlack, NSAttributedStringKey.paragraphStyle: text93Style] as [NSAttributedStringKey : Any]

        let text93TextHeight: CGFloat = text93TextContent.boundingRect(with: CGSize(width: text93Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: text93FontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: text93Rect)
        text93TextContent.draw(in: CGRect(x: text93Rect.minX, y: text93Rect.minY + (text93Rect.height - text93TextHeight) / 2, width: text93Rect.width, height: text93TextHeight), withAttributes: text93FontAttributes)
        context.restoreGState()


        //// Text 94 Drawing
        let text94Rect = CGRect(x: 643.5, y: 730, width: 68, height: 15)
        let text94TextContent = "C"
        let text94Style = NSMutableParagraphStyle()
        text94Style.alignment = .center
        let text94FontAttributes = [NSAttributedStringKey.font: UIFont.systemFont(ofSize: UIFont.systemFontSize), NSAttributedStringKey.foregroundColor: labelBlack, NSAttributedStringKey.paragraphStyle: text94Style] as [NSAttributedStringKey : Any]

        let text94TextHeight: CGFloat = text94TextContent.boundingRect(with: CGSize(width: text94Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: text94FontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: text94Rect)
        text94TextContent.draw(in: CGRect(x: text94Rect.minX, y: text94Rect.minY + (text94Rect.height - text94TextHeight) / 2, width: text94Rect.width, height: text94TextHeight), withAttributes: text94FontAttributes)
        context.restoreGState()


        //// Text 95 Drawing
        let text95Rect = CGRect(x: 643.5, y: 765, width: 68, height: 15)
        let text95TextContent = "V"
        let text95Style = NSMutableParagraphStyle()
        text95Style.alignment = .center
        let text95FontAttributes = [NSAttributedStringKey.font: UIFont.systemFont(ofSize: UIFont.systemFontSize), NSAttributedStringKey.foregroundColor: labelBlack, NSAttributedStringKey.paragraphStyle: text95Style] as [NSAttributedStringKey : Any]

        let text95TextHeight: CGFloat = text95TextContent.boundingRect(with: CGSize(width: text95Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: text95FontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: text95Rect)
        text95TextContent.draw(in: CGRect(x: text95Rect.minX, y: text95Rect.minY + (text95Rect.height - text95TextHeight) / 2, width: text95Rect.width, height: text95TextHeight), withAttributes: text95FontAttributes)
        context.restoreGState()


        //// Text 96 Drawing
        let text96Rect = CGRect(x: 643.5, y: 850, width: 68, height: 15)
        let text96TextContent = "Z"
        let text96Style = NSMutableParagraphStyle()
        text96Style.alignment = .center
        let text96FontAttributes = [NSAttributedStringKey.font: UIFont.systemFont(ofSize: UIFont.systemFontSize), NSAttributedStringKey.foregroundColor: labelBlack, NSAttributedStringKey.paragraphStyle: text96Style] as [NSAttributedStringKey : Any]

        let text96TextHeight: CGFloat = text96TextContent.boundingRect(with: CGSize(width: text96Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: text96FontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: text96Rect)
        text96TextContent.draw(in: CGRect(x: text96Rect.minX, y: text96Rect.minY + (text96Rect.height - text96TextHeight) / 2, width: text96Rect.width, height: text96TextHeight), withAttributes: text96FontAttributes)
        context.restoreGState()


        //// Text 97 Drawing
        let text97Rect = CGRect(x: 643.5, y: 920, width: 68, height: 15)
        let text97TextContent = "N"
        let text97Style = NSMutableParagraphStyle()
        text97Style.alignment = .center
        let text97FontAttributes = [NSAttributedStringKey.font: UIFont.systemFont(ofSize: UIFont.systemFontSize), NSAttributedStringKey.foregroundColor: labelBlack, NSAttributedStringKey.paragraphStyle: text97Style] as [NSAttributedStringKey : Any]

        let text97TextHeight: CGFloat = text97TextContent.boundingRect(with: CGSize(width: text97Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: text97FontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: text97Rect)
        text97TextContent.draw(in: CGRect(x: text97Rect.minX, y: text97Rect.minY + (text97Rect.height - text97TextHeight) / 2, width: text97Rect.width, height: text97TextHeight), withAttributes: text97FontAttributes)
        context.restoreGState()


        //// Text 98 Drawing
        let text98Rect = CGRect(x: 578.5, y: 850, width: 68, height: 15)
        let text98TextContent = "AndZ"
        let text98Style = NSMutableParagraphStyle()
        text98Style.alignment = .center
        let text98FontAttributes = [NSAttributedStringKey.font: UIFont.systemFont(ofSize: UIFont.systemFontSize), NSAttributedStringKey.foregroundColor: labelBlack, NSAttributedStringKey.paragraphStyle: text98Style] as [NSAttributedStringKey : Any]

        let text98TextHeight: CGFloat = text98TextContent.boundingRect(with: CGSize(width: text98Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: text98FontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: text98Rect)
        text98TextContent.draw(in: CGRect(x: text98Rect.minX, y: text98Rect.minY + (text98Rect.height - text98TextHeight) / 2, width: text98Rect.width, height: text98TextHeight), withAttributes: text98FontAttributes)
        context.restoreGState()


        //// 0 0 0 0 Drawing
        let _0000Rect = CGRect(x: 335, y: 834, width: 68, height: 90)
        let _0000TextContent = "0\n0\n0\n0"
        let _0000Style = NSMutableParagraphStyle()
        _0000Style.alignment = .center
        let _0000FontAttributes = [NSAttributedStringKey.font: UIFont.systemFont(ofSize: UIFont.systemFontSize), NSAttributedStringKey.foregroundColor: labelBlack, NSAttributedStringKey.paragraphStyle: _0000Style] as [NSAttributedStringKey : Any]

        let _0000TextHeight: CGFloat = _0000TextContent.boundingRect(with: CGSize(width: _0000Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: _0000FontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: _0000Rect)
        _0000TextContent.draw(in: CGRect(x: _0000Rect.minX, y: _0000Rect.minY + (_0000Rect.height - _0000TextHeight) / 2, width: _0000Rect.width, height: _0000TextHeight), withAttributes: _0000FontAttributes)
        context.restoreGState()


        //// Rectangle 27 Drawing
        let rectangle27Path = UIBezierPath(rect: CGRect(x: 728.05, y: 54.25, width: 25, height: 20))
        checkBoxFill.setFill()
        rectangle27Path.fill()
        UIColor.black.setStroke()
        rectangle27Path.lineWidth = 1
        rectangle27Path.stroke()


        //// Rectangle 33 Drawing
        let rectangle33Path = UIBezierPath(rect: CGRect(x: 728.05, y: 105.25, width: 25, height: 20))
        checkBoxFill.setFill()
        rectangle33Path.fill()
        UIColor.black.setStroke()
        rectangle33Path.lineWidth = 1
        rectangle33Path.stroke()


        //// Rectangle 34 Drawing
        let rectangle34Path = UIBezierPath(rect: CGRect(x: 728.05, y: 135.25, width: 25, height: 20))
        checkBoxFill.setFill()
        rectangle34Path.fill()
        UIColor.black.setStroke()
        rectangle34Path.lineWidth = 1
        rectangle34Path.stroke()


        //// Rectangle 35 Drawing
        let rectangle35Path = UIBezierPath(rect: CGRect(x: 728.01, y: 165.5, width: 25, height: 20))
        checkBoxFill.setFill()
        rectangle35Path.fill()
        UIColor.black.setStroke()
        rectangle35Path.lineWidth = 1
        rectangle35Path.stroke()


        //// Rectangle 36 Drawing
        let rectangle36Path = UIBezierPath(rect: CGRect(x: 728.01, y: 270.5, width: 25, height: 20))
        checkBoxFill.setFill()
        rectangle36Path.fill()
        UIColor.black.setStroke()
        rectangle36Path.lineWidth = 1
        rectangle36Path.stroke()


        //// Rectangle 37 Drawing
        let rectangle37Path = UIBezierPath(rect: CGRect(x: 728.01, y: 358.5, width: 25, height: 20))
        checkBoxFill.setFill()
        rectangle37Path.fill()
        UIColor.black.setStroke()
        rectangle37Path.lineWidth = 1
        rectangle37Path.stroke()


        //// Rectangle 38 Drawing
        let rectangle38Path = UIBezierPath(rect: CGRect(x: 728.01, y: 450.5, width: 25, height: 20))
        checkBoxFill.setFill()
        rectangle38Path.fill()
        UIColor.black.setStroke()
        rectangle38Path.lineWidth = 1
        rectangle38Path.stroke()


        //// Rectangle 39 Drawing
        let rectangle39Path = UIBezierPath(rect: CGRect(x: 728.01, y: 495.5, width: 25, height: 20))
        checkBoxFill.setFill()
        rectangle39Path.fill()
        UIColor.black.setStroke()
        rectangle39Path.lineWidth = 1
        rectangle39Path.stroke()


        //// Rectangle 40 Drawing
        let rectangle40Path = UIBezierPath(rect: CGRect(x: 728.01, y: 564.5, width: 25, height: 20))
        checkBoxFill.setFill()
        rectangle40Path.fill()
        UIColor.black.setStroke()
        rectangle40Path.lineWidth = 1
        rectangle40Path.stroke()


        //// Rectangle 41 Drawing
        let rectangle41Path = UIBezierPath(rect: CGRect(x: 728.01, y: 584.5, width: 25, height: 20))
        checkBoxFill.setFill()
        rectangle41Path.fill()
        UIColor.black.setStroke()
        rectangle41Path.lineWidth = 1
        rectangle41Path.stroke()


        //// Rectangle 42 Drawing
        let rectangle42Path = UIBezierPath(rect: CGRect(x: 728.01, y: 642.5, width: 25, height: 20))
        checkBoxFill.setFill()
        rectangle42Path.fill()
        UIColor.black.setStroke()
        rectangle42Path.lineWidth = 1
        rectangle42Path.stroke()


        //// Rectangle 43 Drawing
        let rectangle43Path = UIBezierPath(rect: CGRect(x: 728.01, y: 693.5, width: 25, height: 20))
        checkBoxFill.setFill()
        rectangle43Path.fill()
        UIColor.black.setStroke()
        rectangle43Path.lineWidth = 1
        rectangle43Path.stroke()


        //// Rectangle 44 Drawing
        let rectangle44Path = UIBezierPath(rect: CGRect(x: 728.01, y: 727.5, width: 25, height: 20))
        checkBoxFill.setFill()
        rectangle44Path.fill()
        UIColor.black.setStroke()
        rectangle44Path.lineWidth = 1
        rectangle44Path.stroke()


        //// Rectangle 45 Drawing
        let rectangle45Path = UIBezierPath(rect: CGRect(x: 728.01, y: 762.5, width: 25, height: 20))
        checkBoxFill.setFill()
        rectangle45Path.fill()
        UIColor.black.setStroke()
        rectangle45Path.lineWidth = 1
        rectangle45Path.stroke()


        //// Rectangle 46 Drawing
        let rectangle46Path = UIBezierPath(rect: CGRect(x: 728.01, y: 812.5, width: 25, height: 20))
        checkBoxFill.setFill()
        rectangle46Path.fill()
        UIColor.black.setStroke()
        rectangle46Path.lineWidth = 1
        rectangle46Path.stroke()


        //// Rectangle 47 Drawing
        let rectangle47Path = UIBezierPath(rect: CGRect(x: 728.01, y: 847.5, width: 25, height: 20))
        checkBoxFill.setFill()
        rectangle47Path.fill()
        UIColor.black.setStroke()
        rectangle47Path.lineWidth = 1
        rectangle47Path.stroke()


        //// Rectangle 48 Drawing
        let rectangle48Path = UIBezierPath(rect: CGRect(x: 728.01, y: 917.5, width: 25, height: 20))
        checkBoxFill.setFill()
        rectangle48Path.fill()
        UIColor.black.setStroke()
        rectangle48Path.lineWidth = 1
        rectangle48Path.stroke()


        //// Rectangle 49 Drawing
        let rectangle49Path = UIBezierPath(rect: CGRect(x: 728.01, y: 957.5, width: 25, height: 20))
        checkBoxFill.setFill()
        rectangle49Path.fill()
        UIColor.black.setStroke()
        rectangle49Path.lineWidth = 1
        rectangle49Path.stroke()


        //// Rectangle 50 Drawing
        let rectangle50Path = UIBezierPath(rect: CGRect(x: 728.01, y: 977.5, width: 25, height: 20))
        checkBoxFill.setFill()
        rectangle50Path.fill()
        UIColor.black.setStroke()
        rectangle50Path.lineWidth = 1
        rectangle50Path.stroke()
        
        context.restoreGState()

    }

    @objc public dynamic class func drawPointerCross(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 75, height: 50), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 75, height: 50), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 75, y: resizedFrame.height / 50)


        //// Color Declarations
        let arrowBlack = UIColor(red: 0.000, green: 0.000, blue: 0.000, alpha: 1.000)

        //// Bezier 4 Drawing
        let bezier4Path = UIBezierPath()
        bezier4Path.move(to: CGPoint(x: 0, y: 23.5))
        bezier4Path.addLine(to: CGPoint(x: 9.44, y: 19.5))
        bezier4Path.addLine(to: CGPoint(x: 9.44, y: 22.5))
        bezier4Path.addLine(to: CGPoint(x: 9.44, y: 24.5))
        bezier4Path.addLine(to: CGPoint(x: 9.44, y: 27.5))
        bezier4Path.addLine(to: CGPoint(x: 0, y: 23.5))
        bezier4Path.close()
        arrowBlack.setFill()
        bezier4Path.fill()


        //// Bezier 5 Drawing
        let bezier5Path = UIBezierPath()
        bezier5Path.move(to: CGPoint(x: 8, y: 23.43))
        bezier5Path.addLine(to: CGPoint(x: 58, y: 23.43))
        arrowBlack.setStroke()
        bezier5Path.lineWidth = 1
        bezier5Path.stroke()


        //// Bezier 10 Drawing
        let bezier10Path = UIBezierPath()
        bezier10Path.move(to: CGPoint(x: 22.14, y: 15.5))
        bezier10Path.addLine(to: CGPoint(x: 36.79, y: 31.36))
        arrowBlack.setStroke()
        bezier10Path.lineWidth = 1
        bezier10Path.stroke()


        //// Text Drawing
        let textRect = CGRect(x: 30, y: 8.43, width: 14, height: 15)
        let textTextContent = "5"
        let textStyle = NSMutableParagraphStyle()
        textStyle.alignment = .left
        let textFontAttributes = [NSAttributedStringKey.font: UIFont.systemFont(ofSize: UIFont.systemFontSize), NSAttributedStringKey.foregroundColor: arrowBlack, NSAttributedStringKey.paragraphStyle: textStyle]

        let textTextHeight: CGFloat = textTextContent.boundingRect(with: CGSize(width: textRect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: textFontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: textRect)
        textTextContent.draw(in: CGRect(x: textRect.minX, y: textRect.minY + (textRect.height - textTextHeight) / 2, width: textRect.width, height: textTextHeight), withAttributes: textFontAttributes)
        context.restoreGState()
        
        context.restoreGState()

    }

    @objc public dynamic class func drawArrow(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 75, height: 24), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 75, height: 24), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 75, y: resizedFrame.height / 24)


        //// Color Declarations
        let arrowBlack = UIColor(red: 0.000, green: 0.000, blue: 0.000, alpha: 1.000)

        //// Bezier 2 Drawing
        let bezier2Path = UIBezierPath()
        bezier2Path.move(to: CGPoint(x: 0, y: 4.5))
        bezier2Path.addLine(to: CGPoint(x: 9.44, y: 0.5))
        bezier2Path.addLine(to: CGPoint(x: 9.44, y: 3.5))
        bezier2Path.addLine(to: CGPoint(x: 9.44, y: 5.5))
        bezier2Path.addLine(to: CGPoint(x: 9.44, y: 8.5))
        bezier2Path.addLine(to: CGPoint(x: 0, y: 4.5))
        bezier2Path.close()
        arrowBlack.setFill()
        bezier2Path.fill()


        //// Bezier 3 Drawing
        let bezier3Path = UIBezierPath()
        bezier3Path.move(to: CGPoint(x: 8, y: 4.5))
        bezier3Path.addLine(to: CGPoint(x: 58, y: 4.5))
        arrowBlack.setStroke()
        bezier3Path.lineWidth = 1
        bezier3Path.stroke()
        
        context.restoreGState()

    }

    @objc public dynamic class func drawCircleConnector(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 10, height: 10), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 10, height: 10), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 10, y: resizedFrame.height / 10)


        //// Color Declarations
        let arrowBlack = UIColor(red: 0.000, green: 0.000, blue: 0.000, alpha: 1.000)

        //// Oval Drawing
        let ovalPath = UIBezierPath(ovalIn: CGRect(x: 0, y: 0, width: 5, height: 5))
        arrowBlack.setFill()
        ovalPath.fill()
        
        context.restoreGState()

    }

    @objc public dynamic class func drawALUbox(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 123, height: 33), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 123, height: 33), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 123, y: resizedFrame.height / 33)


        //// Color Declarations
        let aLUstrokeblack = UIColor(red: 0.000, green: 0.000, blue: 0.000, alpha: 1.000)
        let labelBlack = UIColor(red: 0.000, green: 0.000, blue: 0.000, alpha: 1.000)
        let aLUvalgrey = UIColor(red: 0.855, green: 0.855, blue: 0.855, alpha: 1.000)

        //// Text 2 Drawing
        let text2Rect = CGRect(x: 0, y: 14, width: 22, height: 15)
        let text2TextContent = "A"
        let text2Style = NSMutableParagraphStyle()
        text2Style.alignment = .right
        let text2FontAttributes = [NSAttributedStringKey.font: UIFont.systemFont(ofSize: UIFont.systemFontSize), NSAttributedStringKey.foregroundColor: labelBlack, NSAttributedStringKey.paragraphStyle: text2Style]

        let text2TextHeight: CGFloat = text2TextContent.boundingRect(with: CGSize(width: text2Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: text2FontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: text2Rect)
        text2TextContent.draw(in: CGRect(x: text2Rect.minX, y: text2Rect.minY + (text2Rect.height - text2TextHeight) / 2, width: text2Rect.width, height: text2TextHeight), withAttributes: text2FontAttributes)
        context.restoreGState()


        //// Rectangle 2 Drawing
        let rectangle2Path = UIBezierPath(rect: CGRect(x: 31.87, y: 13, width: 45, height: 17))
        aLUvalgrey.setFill()
        rectangle2Path.fill()
        aLUstrokeblack.setStroke()
        rectangle2Path.lineWidth = 1
        rectangle2Path.stroke()


        //// Rectangle 3 Drawing
        let rectangle3Path = UIBezierPath(rect: CGRect(x: 76.87, y: 13, width: 45, height: 17))
        aLUvalgrey.setFill()
        rectangle3Path.fill()
        aLUstrokeblack.setStroke()
        rectangle3Path.lineWidth = 1
        rectangle3Path.stroke()


        //// Text Drawing
        let textRect = CGRect(x: 32, y: 0, width: 16, height: 13)
        let textTextContent = "0"
        let textStyle = NSMutableParagraphStyle()
        textStyle.alignment = .left
        let textFontAttributes = [NSAttributedStringKey.font: UIFont.systemFont(ofSize: UIFont.smallSystemFontSize), NSAttributedStringKey.foregroundColor: labelBlack, NSAttributedStringKey.paragraphStyle: textStyle]

        let textTextHeight: CGFloat = textTextContent.boundingRect(with: CGSize(width: textRect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: textFontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: textRect)
        textTextContent.draw(in: CGRect(x: textRect.minX, y: textRect.minY + (textRect.height - textTextHeight) / 2, width: textRect.width, height: textTextHeight), withAttributes: textFontAttributes)
        context.restoreGState()


        //// Text 3 Drawing
        let text3Rect = CGRect(x: 77, y: 0, width: 16, height: 13)
        let text3TextContent = "1"
        let text3Style = NSMutableParagraphStyle()
        text3Style.alignment = .left
        let text3FontAttributes = [NSAttributedStringKey.font: UIFont.systemFont(ofSize: UIFont.smallSystemFontSize), NSAttributedStringKey.foregroundColor: labelBlack, NSAttributedStringKey.paragraphStyle: text3Style]

        let text3TextHeight: CGFloat = text3TextContent.boundingRect(with: CGSize(width: text3Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: text3FontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: text3Rect)
        text3TextContent.draw(in: CGRect(x: text3Rect.minX, y: text3Rect.minY + (text3Rect.height - text3TextHeight) / 2, width: text3Rect.width, height: text3TextHeight), withAttributes: text3FontAttributes)
        context.restoreGState()
        
        context.restoreGState()

    }




    @objc public enum ResizingBehavior: Int {
        case aspectFit /// The content is proportionally resized to fit into the target rectangle.
        case aspectFill /// The content is proportionally resized to completely fill the target rectangle.
        case stretch /// The content is stretched to match the entire target rectangle.
        case center /// The content is centered in the target rectangle, but it is NOT resized.

        public func apply(rect: CGRect, target: CGRect) -> CGRect {
            if rect == target || target == CGRect.zero {
                return rect
            }

            var scales = CGSize.zero
            scales.width = abs(target.width / rect.width)
            scales.height = abs(target.height / rect.height)

            switch self {
                case .aspectFit:
                    scales.width = min(scales.width, scales.height)
                    scales.height = scales.width
                case .aspectFill:
                    scales.width = max(scales.width, scales.height)
                    scales.height = scales.width
                case .stretch:
                    break
                case .center:
                    scales.width = 1
                    scales.height = 1
            }

            var result = rect.standardized
            result.size.width *= scales.width
            result.size.height *= scales.height
            result.origin.x = target.minX + (target.width - result.width) / 2
            result.origin.y = target.minY + (target.height - result.height) / 2
            return result
        }
    }
}
